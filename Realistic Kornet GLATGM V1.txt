@name Realistic Kornet GLATGM V1
@inputs  [OptCom Gun]:entity [HitPos]:vector [Active]
@outputs [ATGM]:entity [Dx]:vector [CpuUsage Ops] Pitch Dist
@persist [Rad Speed Up]
@persist [Own]:entity [Range ToReal]
@persist [Ag Ang Upper Dist]
interval(32)

if (first() | dupefinished()) {
    # ----- User Interface ----- #
    Rad   = 1.25
    Speed = 1.25
    
    # ----- Do Not Touch There ----- #
        Own    = owner()
        Range  = 50000
        ToReal = 0.66
        
    function entity findEntity() {
        findByClass("acf_glatgm")
        findSortByDistance(OptCom:pos())
        Ary  = findToArray()
        ATGM = Ary[1, entity]
        
        return ATGM
    }
    
    function number detected() {
        MissileToRackDist = toUnit("m", ATGM:pos():distance(OptCom:pos()))
        
        Detected = MissileToRackDist > 1 ? 1 : 0
        
        return Detected
    }
    
    function angle movement() {
        function void circle() {
            Ag++
            Ag = Ag > 360 ? 0 : Ag
            
            Ang = Ag * Speed^2 * 20
            
            Sin = Rad * sin(Ang)
            Cos = Rad * cos(Ang)
        }
        
        function number down() {
            if (Upper > 0) {
                Upper--
            }
            
            return Upper
        }
        
        if (Detected) {
            DistTo = toUnit("m", OptCom:pos():distance(ATGM:pos()))
            
            if (DistTo > 1) {
                circle()
                Upper++
            } else {
                Upper = 0
            }
        }
        Pitch = clamp(Upper * 10^-2, 0, Dist * 10^-3 * 2)
        Angle = Gun:forward():toAngle() + ang(Sin, Cos, 0) + ang(Pitch, 0, 0)
        
        return Angle
    }
    
    function void removeNum() {
        if (changed(!ATGM)) {
            MissileToRackDist = 0
            Detected          = 0
            DistTo            = 0
            Pitch             = 0
            Upper             = 0
        }
    }
    
    rangerFilter(Gun)
    rangerFilter(ATGM)
    rangerPersist(1)
}

if (Active) {
    removeNum()
    if (!ATGM) {
        findEntity()
    } else {
        detected()
        
        if (Detected) {
            movement()
        }
    }
    Dist = toUnit("m", Gun:attachmentPos("muzzle"):distance(HitPos))
    Mv0  = Gun:acfMuzzleVel() * ToReal
    ToF  = Dist / Mv0
    Up   = Dist / 10^2
    Dx   = vec(0, 0, Dist * ToF^2 * 10)
    
    OptCom:setAng(Angle)
}

    CpuUsage = cpuUsage() * 1000000
    Ops      = ops()
    
# Made By RuBid Shit-ora Support V1 V2019.07.27
