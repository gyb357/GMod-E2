@name ACF Ballistic Calculator V5.31
@inputs  [Gun Target]:entity [AmmoSlot]:array [AimPos]:vector [Active Arc FlightTime]
@outputs [Angle]:angle [Vector]:vector [OpsCpu]:array ToF Time VoG:vector

@persist [SetAng Fall Lead Curv]
@persist [MzPos MzHolo MzVel MaxMul LeadMul Acc Auto]
@persist [Type LCons HCons]:array
@persist [G Pi T ToM ToU]

@persist [C1 C2]:table [Base Muzzle]:entity
@persist [Max] [Tp Tv VoT Tpos]:vector [Vf Vi]:vector [Vfl Vil]
@trigger none

runOnTick(1)

if (first() | dupefinished()) {
    # ----- Option ----- #
    # FCS option
    SetAng = 0
    Fall   = 1
    Lead   = 1
    Curv   = 1
    
    # Muzzle
    MzPos   = 0   # Set muzzle position
    MzHolo  = 0   # Draw muzzle position
    MzVel   = 0   # Custom muzzlevel
    # Maximum range
    MaxMul  = 0.9 # Maximum range multiplier
    # Lead
    LeadMul = 1   # Lead multiplier
    Acc     = 1   # Apply acceleration
    Auto    = 0   # Auto aim (0:Non, 1:Full)
    
    # Ammo slot, Fall constant
        Type  = array("APFSDS", "HE")
        LCons = array(0.47, 0.47)
        HCons = array()
        
    # ----- Constant ----- #
        G   = gravity()
        Pi  = pi()
        T   = tickInterval()
        ToM = 39.37
        ToU = 0.01905
        
    function entity entity:parentBase() {
        Find = 1
        while (Find) {
            if (This:parent()) {
                This = This:parent()
                if (!This:parent()) {ParentBase = This, Find = 0}
            }
            else {ParentBase = This, Find = 0}
        }
        return ParentBase
    }
    
    function entity entity:acfMuzzlePos([X Size]) {
        if (!abs(X)) {
            Att = This:attachmentPos("muzzle")
            Pos = (Att ? Att : This:pos())
        }
        else {
            Pos = This:pos() + This:forward()*This:boxSize():x()*X
        }
        holoCreate(1, Pos, vec(Size), This:angles())
        holoParent(1, This)
        return holoEntity(1)
    }
    
    Slot = (AmmoSlot:count() ? AmmoSlot : Type)
    if (Slot:count()) {
        foreach (I, S:string = Slot) {
            C1[S, number] = C1[S, number] + LCons[I, number]
            C2[S, number] = C2[S, number] + HCons[I, number]
        }
        if (Gun) {
            Base   = Gun:parentBase()
            Muzzle = Gun:acfMuzzlePos(MzPos, MzHolo)
        }
    }
    
    reset()
}

if (Gun) {
    # Target component
    if (Target) {
        Tp   = Target:pos()
        Tv   = Target:vel()
        VoT  = (!Tv ? $Tp/T : Tv)
        Tpos = (Auto ? Tp : AimPos) + VoT*T
    }
    else {Tpos = AimPos}
    
    # Position
    VoG  = Base:vel()
    Gpos = Gun:pos() + VoG*T
    Mpos = Muzzle:pos() + VoG*T
    TmG  = Tpos - Gpos
    
    # Muzzle velocity
    Mv = Gun:acfMuzzleVel()
    V0 = (MzVel & Mv ? MzVel : Mv)*ToM
    
    # Maximum range
    Ammo = Gun:acfAmmoType()
    if (changed(Gun:acfAmmoType())) {Max = ((V0^2*sin(90))/G)*MaxMul}
    
    # Flight time 1
    Dist = Mpos:distance(Tpos)
    Time = Dist/V0
}

if (Active & V0 & (Max > Dist)) {
    if (Fall) {
        # XY distance component
        Sig = (Arc ? 1 : -1)
        TmM = Tpos - Mpos
        Dx  = sqrt(TmM:x()^2 + TmM:y()^2)
        Dy  = -TmM:z()
        
        # Constant matching
        Cons = (Sig == -1 ? C1[Ammo, number] : C2[Ammo, number])
        
        # Currect distance
        XmY = Dx - Dy
        Cxy = XmY*(Time + Time^2 + Time^3)*(Cons/1000)
        
        # Quadratic formula
        X   = Dx + Cxy
        Y   = Dy - Cxy
        Tan = -atan((V0^2 + Sig*sqrt(V0^4 - G^2*X^2 + 2*Y*G*V0^2))/(G*X))
        
        # Final pitch angle
        Tgp = TmG:toAngle():pitch()
        Th  = Tan - Tgp
    }
    
    if (Lead) {
        # Flight time 2
        if (FlightTime) {ToF = FlightTime}
        else {
            if (Fall) {
                if (Dist*ToU < 10) {ToF = Time}
                else {
                    ToF = abs((2*V0*sin(Th))/(G*cos(Tgp)))
                }
            }
            else {ToF = Time}
        }
        
        # Linear movement lead
        Neg = VoG*ToF + (0.5*$VoG*ToF^2)*Acc
        
        if (Target) {
            Lprd = VoT*ToF + (0.5*$VoT*ToF^2)*Acc
            
            # Curve movement lead
            if (!Curv) {Prd = Lprd}
            else {
                # VoT before
                Vf     = VoT
                Vfl    = Vf:length()
                # Curavture
                Axis   = Vf:cross(Vi):normalized()
                AngVel = acos(Vf:dot(Vi)/Vfl/Vil)/T
                Rad    = Vfl/(AngVel/180*Pi)
                Center = Tpos + Vf:cross(Axis):normalized()*Rad
                Cprd   = ((Tpos - Center):rotateAroundAxis(-Axis, AngVel*ToF) + Center) - Tpos
                # VoT after
                Vi     = VoT
                Vil    = Vi:length()
                
                Prd  = ((isnan(Rad) | isinf(Rad)) ? Lprd : Cprd)*LeadMul
            }
        }
    }
}
else {Prd = Lprd = vec(), Th = 0}

    Angle  = (TmG + Prd - Neg):toAngle() + ang(Th, 0, 0)
    Vector = Tpos + Prd
    
    if (SetAng) {Gun:setAng(Angle)}
    
    OpsCpu = array(ops(), cpuUsage()*10^6)
