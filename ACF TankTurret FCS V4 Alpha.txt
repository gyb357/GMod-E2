@name ACF TankTurret FCS V4 Alpha 0.7
@inptus  [Pod Cam]:wirelink [Gun]:entity [Mod]:number
@outputs [CpuOps]:array [Th Cor]:number
@persist [PG]:vector [G Pi Caliber DragDiv ToMs Optimal Dt Increase Tolerance]:number
@persist [Rk4]:array [Pos Vel EndPos]:vector

interval(1)

if (first() | dupefinished()) {
  PG = propGravity()
  G = gravity()
  Pi = pi()

  Caliber = Gun:acfCaliber()
  DragDiv = acfDragDiv()

  ToMs = 39.37

  Optimal = 0
  Dt = 1
  Increase = 1
  Tolerance = 0.01

  function array rk4(Comp:array, Coef, Dt) {
    P1 = Comp[1, vector]
    V1 = Comp[2, vector]

    Vk = V1:length()*Coef

    A1 = PG - Vk*V1

    V2 = V1 + A1*Dt/2
    A2 = PG - Vk*V2
    V3 = V1 + A2*Dt/2
    A3 = PG - Vk*V3

    V4 = V1 + A3*Dt
    A4 = PG - Vk*V4

    Xf = P1 + (Dt/6)*(V1 + 2*(V2 + V3) + V4)
    Vf = V1 + (Dt/6)*(A1 + 2*(A2 + A3) + A4)
    return array(Xf, Vf)
  }

  holoCreate(1)
}

  Active = Pod["Active", number]
if (changed(Active) & Active) {
  Driver = Pod["Driver", entity]
  Cam["Position", vector] = Driver:pos() + vec(0, 0, 100)
  Cam["Distance", number] = 100
}

if (Active) {
  Sign = Mod ? 1 : -1

  HitPos = Cam["HitPos", vector]
  GunPos = Gun:massCenter()

  Dx = sqrt((HitPos:x() - GunPos:x())^2 + (HitPos:y() - GunPos:y())^2)
  Dy = HitPos:z() - GunPos:z()
  Dk = Dy/Dx

  Mv0 = Gun:acfMuzzleVel()*ToMs
  Th = atan((Mv0^2 + Sign*sqrt(Mv0^4 - G*(G*Dx^2 + 2*Dy*Mv0^2)))/(G*Dx))

  Mass = Gun:acfProjectileMass()
  Coef = (Pi*Caliber^2)/(4000000*Mass*DragDiv)

  Angle = (HitPos - GunPos):toAngle()
  ThDir = (Angle:setPitch(Th)):forward()

  Diff = HitPos:dot(EndPos)
  if (abs(Diff) < Tolerance) {Run = 0}
    else {Run = 1}
  #if (changed(Run == 1) & Run == 1) {Cor = 0}

  if (!Run) {
    Pos = GunPos
    Vel = Mv0*ThDir
    Rk4 = array(Pos, Vel)
  }

  while (Run & perf()) {
    Rk4 = rk4(Rk4, Coef, Dt)
    Pos = Rk4[1, vector]
    Vel = Rk4[2, vector]

    PosXY = sqrt(Pos:x()^2 + Pos:y()^2)
    Limit = Dk*PosXY

    if ((PosXY > Dx) | (Pos:z() < Limit)) {
      EndPos = Pos

      Cor += Diff*Increase
      CorTh = Th + Cor
      RkDir = (Angle:setPitch(CorTh)):forward()

      Pos = GunPos
      Vel = Mv0*RkDir
      Rk4 = array(Pos, Vel)
    }
  }
}

  holoPos(1, EndPos)
  Gun:setAng(Angle:setPitch(Th + Cor))

  CpuOps = array(cpuUsage()*10^6, ops())
