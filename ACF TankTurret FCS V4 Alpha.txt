@name ACF TankTurret FCS V4 Alpha 0.4
@inputs  [Pod Cam]:wirelink [Gun]:entity [Solve]:number [Reset]:number
@outputs [CpuOps]:array [EndPos]:vector2 [Lk Dth Cth Cpi Pitch Calc]:number
@persist [Gravity]:vector2 [Pi Caliber DragDiv ToM ToMs ToRad ToDeg Dt M Tolerance Increase]:number

@persist [Mass K Mv0 Dx Dy Lk Angle Theta]:number

@persist [Rk4]:array [Pos Vel EndPos]:vector2 [Run Hit Diff Dth Cth Cpi]:number

interval(1)

if (first() | dupefinished()) {
  Gravity = vec2(0, -gravity())

  Pi = pi()
  Caliber = Gun:acfCaliber()
  DragDiv = acfDragDiv()

  ToM = 0.01905
  ToMs = 39.37
  ToRad = (Pi/180)
  ToDeg = (180/Pi)

  Dt = 1
  M  = -50

  Tolerance = 5
  Increase = 0.001

  function array rk4(Comp:array, K, Dt) {
    P1 = Comp[1, vector2]
    V1 = Comp[2, vector2]

    Kv = V1:length()*K

    A1 = Gravity -Kv*V1

    V2 = V1 + A1*Dt/2
    A2 = Gravity - Kv*V2
    V3 = V1 + A2*Dt/2
    A3 = Gravity - Kv*V3

    V4 = V1 + A3*Dt
    A4 = Gravity - Kv*V4

    Xf = P1 + (Dt/6)*(V1 + 2*(V2 + V3) + V4)
    Vf = V1 + (Dt/6)*(A1 + 2*(A2 + A3) + A4)
    return array(Xf, Vf)
  }
}

  Active = Pod["Active", number]

if (changed(Active) & Active) {
  Driver = Pod["Driver", entity]
  Cam["Position", vector] = Driver:pos() + vec(0, 0, 50)
  Cam["Distacne", number] = 50
}

if (Reset) {Run = Hit = Calc = Pitch = 0}

if (Active) {
  HitPos = Cam["HitPos", vector]
  GunPos = Gun:massCenter() # attachmentPos("muzzle")
  
  if (Solve & !Run & !Hit & !Calc) {
    Mass = Gun:acfProjectileMass()
    K    = (Pi*Caliber^2)/(4000000*Mass*DragDiv)
    Mv0  = Gun:acfMuzzleVel()*ToMs

    Dx = sqrt((HitPos:x() - GunPos:x())^2 + (HitPos:y() - GunPos:y())^2)
    Dy = (HitPos:z() - GunPos:z())
    Lk = (Dy/Dx)

    Angle = (HitPos - GunPos):toAngle()
    Theta = Angle:pitch()*ToRad

    Pos = vec2(0, 0)
    Vel = vec2(Mv0*cos(Theta), Mv0*sin(Theta))
    Rk4 = array(Pos, Vel)

    Run = 1
    Hit = 0
  }
}

if (Run) {
  while (perf() & !Hit) {
    Rk4 = rk4(Rk4, K, Dt)
    Pos = Rk4[1, vector2]
    Vel = Rk4[2, vector2]

    Limit = Lk*Pos:x() + M # y = fx + m
    if ((Pos:x() > Dx) | (Pos:y() < Limit)) {
      EndPos = Pos

      DiffX = (Dx - EndPos:x())*ToM
      DiffY = (Dy - EndPos:y())*ToM

      Diff = (DiffX + DiffY)*Increase
      Dth += Diff*ToRad
      Cth = Theta + Dth

      Pos = vec2(0, 0)
      Vel = vec2(Mv0*cos(Cth), Mv0*sin(Cth))

      Rk4 = array(Pos, Vel)
    }

    if (abs(DiffX) + abs(DiffY) < abs(Tolerance)) {
      Run = 0
      Hit = 1
      Calc = 1
      Cpi = Cth*ToDeg
      hint("Calculate Complete", 5)
    }

    if (Cpi > 90 | Cpi < -90) {
      hint("Can't Calculate", 5)
      Run = 0
      Hit = 0
      Calc = 1
    }
  }
}

  Pitch = clamp(Cpi, -45, 45)
  Yaw = Angle:yaw()
  Gun:setAng(ang(Pitch, Yaw, 0))

  CpuOps = array(cpuUsage()*10^6, ops())
