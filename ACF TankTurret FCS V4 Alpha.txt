@name ACF Tank Turret V4 Alpha 0.9
@inputs  [Pod Cam]:wirelink [Base Gun TurretGate]:entity [ChangeCam Zoom Trig Hold]:number
@outputs [OpsCpu]:array [Th RkTh Solve]:number
@persist [Elevation Depression RotateSpeed YawClamp CamOffset CamDistance ZoomCount MagnificMax Tolerance Increase Kp Ki Kd Kdt Rdt RK4]:number [RotateSound]:string
@persist [Gv]:vector2 [G Pi Tick Caliber DragDiv Range RotateYaw Magnific]:number

@persist [CamMod Zoom ZoomIndex]:number

@persist [Rk4]:array [BPos BVel EndPos]:vector2 [P RkTh]:number
@persist [Ranger]:ranger [Chair Driver]:entity

interval(50)

if (first() | dupefinished()) {
  # ----- Option ----- #
  Elevation   = 90
  Depression  = 20
  RotateSpeed = 10
  YawClamp    = 360

  CamOffset   = 100
  CamDistance = 300

  ZoomCount   = 1
  MagnificMax = 80

  Tolerance = 1
  Increase  = 1

  Kp = 0.05
  Kdt = 1
  Rdt = 0.001

  RK4 = 0

  RotateSound = "acf_extra/tankfx/turret5.wav"

  # ----- Constraints ----- #
    Gv = vec2(0, -gravity())
    G  = gravity()
    Pi = pi()

    Tick = tickInterval()

    Caliber = Gun:acfCaliber()
    DragDiv = acfDragDiv()

    Range     = 50000
    RotateYaw = YawClamp/2
    Magnific  = MagnificMax/ZoomCount

  function array rk4(Comp:array, K, Dt) {
    P1 = Comp[1, vector2], V1 = Comp[2, vector2]
    Drag = V1:length()*K

    A1 = Gv - Drag*V1
    V2 = V1 + A1*Dt/2, A2 = Gv - Drag*V2
    V3 = V1 + A2*Dt/2, A3 = Gv - Drag*V3
    V4 = V1 + A3*Dt,   A4 = Gv - Drag*V4
    Xf = P1 + (Dt/6)*(V1 + 2*(V2 + V3) + V4)
    Vf = V1 + (Dt/6)*(A1 + 2*(A2 + A3) + A4)
    return array(Xf, Vf)
  }

  function setHoloTurret() {
    holoCreate(1,Gun:pos())
    holoCreate(2, TurretGate:pos())
    holoParent(1, 2)
    holoParent(2, Base)

    Gun:deParent()
    TurretGate:deParent()

    Gun:parentTo(holoEntity(1))
    TurretGate:parentTo(holoEntity(2))
  }

  rangerFilter(Gun)
  rangerFilter(Base:getConstraints())
  rangerPersist(1)
  setHoloTurret()
}

  Active = Pod["Active", number]
if (changed(Active) & Active) {
  Chair  = Pod["Entity", entity]
  Driver = Pod["Driver", entity]

  Cam["Parent", entity] = Base
}

if (Active) {
  if (~ChangeCam & ChangeCam) {CamMod = !CamMod}
  CamPosition = Base:pos() + vec(0, 0, CamOffset)
  Cam["Position", vector] = CamPosition
  Cam["Distance", number] = CamDistance*CamMod

  if (~Zoom & Zoom) {ZoomIndex += (ZoomIndex > ZoomCount) ? -ZoomCount : 1}
  if (changed(ZoomIndex) & ZoomIndex) {Cam["FOV", number] = 90 - Magnific*ZoomIndex}


  EyeAng = Chair:toLocal(Driver:eyeAngles())
  Ranger = rangerOffset(Range, CamPosition, EyeAng:forward())


  AmmoType = Gun:acfAmmoType()

  Mv = Gun:acfMuzzleVel()*39.37
  M  = Gun:acfProjectileMass()
  K  = (Pi*Caliber^2)/(4000000*M*DragDiv)
  
  TPos = Ranger:pos()
  GPos = Gun:massCenter()
  Sign = Trig ? 1 : -1

  Dx  = sqrt((TPos:x() - GPos:x())^2 + (TPos:y() - GPos:y())^2)
  Dy  = TPos:z() - GPos:z()
  Dk  = Dy/Dx
  Th  = atan((Mv^2 + Sign*sqrt(Mv^4 - G*(G*Dx^2 + 2*Dy*Mv^2)))/(G*Dx))
  ToF = Dx/Mv*cos(Th)

  if (RK4) {
    DiffDx = Dx - EndPos:x(), DiffDy = Dy - EndPos:y()
    if (((abs(DiffDx) + abs(DiffDy))*0.01905 > Tolerance)) {Solve = 1}
    if (!Solve) {
      BPos = vec2(0, 0)
      BVel = vec2(Mv*cos(CTh), Mv*sin(CTh))
      Rk4  = array(BPos, BVel)
    }
    while (Solve) {
      Rk4  = rk4(Rk4, K, Rdt)
      BPos = Rk4[1, vector2]
      BVel = Rk4[2, vector2]
      if (BPos:x() > Dx | BPos:y() < Dk*BPos:x()) {
        EndPos = BPos
        P = (DiffDx + DiffDy)*0.01905
        RkTh += (Kp*P)*(-Sign)*Increase
        CTh = Th + RkTh

        BPos = vec2(0, 0)
        BVel = vec2(Mv*cos(CTh), Mv*sin(CTh))
        Rk4 = array(BPos, BVel)
      }
      if (CTh > 90 | CTh < -90 | ops() > 5000) {Solve = 0}
    }
  }
  else {CTh = Th}

  GunAng = (TPos - Gun:pos()):toAngle()

  TAng = Hold ? Base:angles():setRoll(0) : GunAng:setPitch(CTh)
}

  Force = Gun:toWorld(clamp(Gun:toLocal(TAng), ang(-RotateSpeed), ang(RotateSpeed)))
  Angle = clamp(Base:toLocal(Force), ang(-Elevation, -RotateYaw, -1), ang(Depression, RotateYaw, 1))
  Local = Gun:toLocal(Base:toWorld(Angle))

  holoAng(1, Local + Gun:forward():toAngle()*ang(1, 1, 0)) # Gun
  holoAng(2, Base:toWorld(TAng*ang(0, 1, 0)))              # Turret

  OpsCpu = array(ops(), cpuUsage()*10^6)
