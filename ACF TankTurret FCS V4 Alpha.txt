@name ACF Tank Turret FCS V4 Alpha 1.5
@inputs  [Pod Cam]:wirelink [Base Gun]:entity [ChangeCam Zoom Hold Trig]
@outputs [OpsCpu]:array [Th RkTh CTh RkDxm Hit Run] [TPos GPos]:vector

@persist [Elevation Depression RotateSpeed YawClamp CamOffset CamDistance ZoomCount MagnificMax FCSMod Dt Increase Tolerance] [RotateSound]:string
@persist [Gv]:vector2 [G Pi Caliber DragDiv Range Magnific RotateYaw] [Inertia]:angle

@persist [Chair Driver]:entity [CamMod ZIndex GunHold]
@persist [Ranger]:ranger
@persist [Rk4]:array [VoG Negative]:vector [BPos BVel EndPos]:vector2 [Th RkTh CTh Hit Run]

interval(45)

if (first() | dupefinished()) {
# ----- Setting ----- #
  Elevation   = 90
  Depression  = 20
  RotateSpeed = 10
  YawClamp    = 360

  CamOffset   = 100
  CamDistance = 300

  ZoomCount   = 3
  MagnificMax = 80

  FCSMod  = 1
  # 1 = direct ballistics
  # 2 = artillery ballistics

  Dt = 0.005
  Increase  = 0.001
  Tolerance = 1 # unit: meter

  RotateSound = "acf_extra/tankfx/turret5.wav"
  
# ----- Don't modify this ----- #
    Gv = vec2(0, -gravity())
    G  = gravity()
    Pi = pi()
    Caliber = Gun:acfCaliber()
    DragDiv = acfDragDiv()

    Range = 50000
    Magnific  = MagnificMax/ZoomCount
    RotateYaw = YawClamp/2
    Inertia   = shiftL(ang(Gun:inertia()))

  function array rk4(Comp:array, DragCoef, Dt) {
    P1 = Comp[1, vector2], V1 = Comp[2, vector2]
    K  = V1:length()*DragCoef

    A1 = Gv - K*V1
    V2 = V1 + A1*Dt/2, A2 = Gv - K*V2
    V3 = V1 + A2*Dt/2, A3 = Gv - K*V3
    V4 = V1 + A3*Dt,   A4 = Gv - K*V4
    Xf = P1 + (Dt/6)*(V1 + 2*(V2 + V3) + V4)
    Vf = V1 + (Dt/6)*(A1 + 2*(A2 + A3) + A4)
    return array(Xf, Vf)
  }

  function array resetRk4(V, T) {
    return array(vec2(0, 0), vec2(V*cos(T), V*sin(T)))
  }

  rangerFilter(Gun)
  rangerFilter(Base:getConstraints())
  rangerPersist(1)
}

  Active = Pod["Active", number]
if (changed(Active) & Active) {
  Chair  = Pod["Entity", entity]
  Driver = Chair:driver()

  Cam["parent", entity] = Base

  ZIndex  = 0
  FOV     = 90
  GunHold = 0
}

if (Active) {
  if (changed(ChangeCam) & ChangeCam) {CamMod = !CamMod}
  if (changed(CamMod) & CamMod) {
    CamDist                 = CamMod ? 0 : CamDistance
    Cam["Distance", number] = CamDist
  }
  CamPosition             = Base:pos() + vec(0, 0, CamOffset)
  Cam["Position", vector] = CamPosition

  if (changed(Zoom) & Zoom) {ZIndex += 1}
  if (ZIndex > ZoomCount)   {ZIndex = 0}
  if (changed(ZIndex) & ZIndex) {
    FOV                = 90 - ZIndex*Magnific
    Cam["FOV", number] = FOV
  }

  if (changed(Hold) & Hold) {GunHold = !GunHold}
  if (!GunHold) {
    EyeAng = Chair:toLocal(Driver:eyeAngles())
    Ranger = rangerOffset(Range, CamPosition, EyeAng:forward())
  }

  TPos = Ranger:pos()
  GPos = Gun:massCenter() #Gun:attachmentPos("muzzle")
  Mv   = Gun:acfMuzzleVel()*39.37

  if (FCSMod & Mv) {
    Sign = (Trig*(FCSMod == 2)) ? 1 : -1
    Dx = sqrt((TPos:x() - GPos:x())^2 + (TPos:y() - GPos:y())^2)
    Dy = TPos:z() - GPos:z()
    Th = atan((Mv^2 + Sign*sqrt(Mv^4 - G*(G*Dx^2 + 2*Dy*Mv^2)))/(G*Dx))

    if (FCSMod == 1) {
      ToF = Dx/Mv*cos(Th)
      VoG = Gun:vel()
      Negative = -(VoG*ToF + 0.5*$VoG*ToF^2)
    }

    if (FCSMod == 2) {
      Dk = Dy/Dx
      Mass = Gun:acfProjectileMass()
      Drag = (Pi*Caliber^2)/(4000000*Mass*DragDiv)

      if (changed(Th) & Th) {Run = 1}
      while (perf() & Run) {
        Rk4  = rk4(Rk4, Drag, Dt)
        BPos = Rk4[1, vector2]
      }
      if (BPos:y() < Dk*BPos:x()) {
        EndPos = BPos
        RkTh   = (Dx - EndPos:x())*0.01905*Increase
        CTh    = Th + RkTh
        Rk4    = resetRk4(Mv, CTh)
      }
      RkDxm = (Dx - EndPos:x())*0.01905
      Hit   = (abs(RkDxm) < Tolerance) ? 1 : 0
      
      if (isnan(CTh) | isinf(CTh) | abs(CTh) > 90 | Hit) {Run = 0}
      if (!Run & !Hit) {Rk4 = resetRk4(Mv, Th)}
    }
    else {CTh = Th}
    if (isnan(CTh) | isinf(CTh)) {CTh = 0}
  }
  else {CTh = 0}
}

  GunAng = GunHold ? Base:angles() : ((TPos + Negative) - GPos):toAngle():setPitch(-CTh)
  Force  = Gun:toWorld(clamp(Gun:toLocal(GunAng), ang(-RotateSpeed), ang(RotateSpeed)))
  Angle  = clamp(Base:toLocal(Force), ang(-Elevation, -RotateYaw, -1), ang(Depression, RotateYaw, 1))
  Local  = Gun:toLocal(Base:toWorld(Angle))
  Gun:applyAngForce((Local*250 - Gun:angVel()*47) * Inertia) #250 47

  OpsCpu = array(ops(), cpuUsage()*10^6)
