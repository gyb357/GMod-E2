@name ACF Trajectory CCIP V2
@inputs  [Gun Target]:entity [Solve]
@outputs [Time] [EndPos]:vector [OpsCpu]:array
@persist [Holo Size Rk2 Rk4 MuzzlePos MuzzleHolo MuzzleVel Smooth Cost Dt]
@persist [Gv]:vector [G Pi T Caliber DragDiv ToM Dt2 Dt6]
@persist [Base Mholo]:entity
@persist [Pf Vf Pos EndPos]:vector [Run I ToF Lowpass]
@trigger none

if (dupefinished()) {reset()}
if (first()) {
    # ----- Option ----- #
    # CCIP hologram
    Holo = 1
    Size = 5
    
    # Runge kutta method
    Rk2 = 0
    Rk4 = 1
    
    # Detail
    MuzzlePos  = 0    # Set muzzle position
    MuzzleHolo = 0    # Draw muzzle position
    MuzzleVel  = 0    # Custom muzzlevel
    Smooth     = 0.5  # Lowpass filter smooth
    Cost       = 2000 # Calculation cost (Maximum ops)
    Dt         = 0.015  # Delta time
    
    # ----- Constant ----- #
        Gv      = propGravity()
        G       = gravity()
        Pi      = pi()
        T       = tickInterval()
        Caliber = Gun:acfCaliber()
        DragDiv = acfDragDiv()
        
        ToM     = 39.37
        Dt2     = Dt/2
        Dt6     = Dt/6
        
    # ----- Function ----- #
    function entity entity:parentBase() {
        Find = 1
        while (Find) {
            if (This:parent()) {
                This = This:parent()
                if (!This:parent()) {ParentBase = This, Find = 0}
            }
            else {ParentBase = This, Find = 0}
        }
        return ParentBase
    }
    
    function entity entity:muzzlePos(X) {
        if (abs(X) != 0) {
            Pos = This:pos() + This:forward()*This:boxSize():x()*X
        }
        else {Pos = This:attachmentPos("muzzle")}
        
        holoCreate(1, Pos, vec(MuzzleHolo))
        holoParent(1, This)
        return holoEntity(1)
    }
    
    
    if (Gun) {
        Base  = Gun:parentBase()
        Mholo = Gun:muzzlePos(MuzzlePos)
    }
    
    rangerPersist(1)
    rangerFilter(Gun)
    # CCIP hologram
    holoCreate(2, vec())
    holoScale(2, vec(Size)*Holo)
}

runOnTick(1)

if (changed(Gun) & Gun) {reset()}
if (Gun) {
    # Velocity
    VoG  = Base:vel()
    Gpos = Gun:pos() + VoG*T
    Mpos = Mholo:pos() + VoG*T
    
    # Muzzle velocity
    Mvf  = Gun:acfMuzzleVel()
    Mv   = (MuzzleVel & Mvf ? MuzzleVel : Mvf)*ToM
}

if (Solve & Mv) {
    # Drag coefficient
    K = (Pi*Caliber^2)/(4000000*Gun:acfProjectileMass()*DragDiv)
    
    # While loop
    while (opcounter() < Cost) {
        # Before rk4 state
        P1 = Pf, V1 = Vf
        Vk = V1:length()*K
        
        # Runge kutta solver
        if (Rk2) {
            A1 = Gv - Vk*V1
            V2 = V1 + A1*Dt, A2 = Gv - Vk*V2
            Pf += Dt2*(V1 + V2)
            Vf += Dt2*(A1 + A2)
        }
        if (Rk4) {
            A1 = Gv - Vk*V1
            V2 = V1 + A1*Dt2, A2 = Gv - Vk*V2
            V3 = V1 + A2*Dt2, A3 = Gv - Vk*V3
            V4 = V1 + A3*Dt,  A4 = Gv - Vk*V4
            Pf += Dt6*(V1 + 2*(V2 + V3) + V4)
            Vf += Dt6*(A1 + 2*(A2 + A3) + A4)
        }
        # Flight time
        I += Dt
        
        # Raycast
        Trace = rangerOffset(P1, Pf)
        if (Target) {
            Tmp1 = Gpos - Pf
            Tmp2 = Gpos - Target:pos()
            Pfxy = sqrt(Tmp1:x()^2 + Tmp1:y()^2)
            Tpxy = sqrt(Tmp2:x()^2 + Tmp2:y()^2)
        }
        if ((Target & (Tpxy < Pfxy)) | Trace:hit()) {
            Pf     = Trace:pos()
            EndPos = Pf 
            Run    = 0
            ToF    = I
        }
        if (!Run) {
            Run = 1
            Pf  = Mpos
            Vf  = Mv*Gun:forward() + VoG
            I   = 0
        }
    }
    
    # Flight time (lowpass filter)
    Before  = Lowpass
    Lowpass = (1 - Smooth)*Before + Smooth*ToF
    Time    = Lowpass
    
    if (Holo) {holoPos(2, EndPos)}
}

    OpsCpu = array(ops(), cpuUsage()*10^6)

# Made by RuBid ACF Trajectory CCIP V1 V2021.08.03
