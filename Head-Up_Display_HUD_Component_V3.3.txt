@name Head-Up Display HUD Component V3.3
@inputs  [Pod EGP]:wirelink [Base Chair]:entity
@inputs  [Active EngineActive Gear AmmoSwitch AmmoCount CoaxReady SmokeReady CoaxAmmoCount SmokeAmmoCount Ready]
@outputs [Ammo1Active Ammo2Active Ammo3Active Speed FLIR Ops]
@persist [Ammo AmmoSelect]
@persist [Dv]:entity [XY]:vector [V2]:vector2 [String]:string

#EGP: Num 17 End
    
if( first() | dupefinished() ){
    
    AmmoSelect = 1
    
    EGP:egpClear()
    
    printColor( vec( 250, 150, 0 ), "AmmoSwitch: R" )
    
    function screenSize(){
        
        Dv = Chair:driver()
        X = egpScrSize( Dv ):x()
        Y = egpScrSize( Dv ):y()
        V2 = vec2( X, Y ) / 512
    }
    
    function variable(){
        
        Speed = toUnit("km/h", Base:vel():length())
    }
    
    function ammoSelect(){
        
        #Color Variable
        Green = vec( 0, 250, 0 )
        Red = vec( 250, 0, 0 )
        
        if( Ready ){ EGP:egpColor( 2, ( Green ) ) }
            else{ EGP:egpColor( 2, ( Red ) ) }
        
        if( AmmoSwitch & ~AmmoSwitch ){ AmmoSelect += 1 }
        
        if( AmmoSelect > 3 ){ AmmoSelect = 1 }
        
        if( AmmoSelect == 1 ){ Ammo1Active = 1 String = "AP" }
            else{ Ammo1Active = 0 }
        
        if( AmmoSelect == 2 ){ Ammo2Active = 1 String = "APHE" }
            else{ Ammo2Active = 0 }
        
        if( AmmoSelect == 3 ){ Ammo3Active = 1 String = "HE" }
             else{ Ammo3Active = 0 }
        }
}

if( Active ){
    
    interval( 100 )
    
    screenSize()
    variable()
    ammoSelect()
    
    Dv = Pod[ "Entity", entity ]:driver()
    Key = Dv:keyPressed( "F" )
    
    #EGP Text
    EGP:egpText( 9, "Speed " + floor( Speed ), vec2( 186, 296 ) * V2 )
    EGP:egpText( 10, "Gear " + ( Gear ), vec2( 186,306 ) * V2 )
    EGP:egpText( 11, "" + ( AmmoCount ), vec2( 296,296 ) * V2 )
    EGP:egpText( 12, ( String ), vec2( 296, 306 ) * V2 )
    EGP:egpText( 16, "" + ( CoaxAmmoCount ), vec2( 330, 296 ) * V2 )
    EGP:egpText( 17, "" + ( SmokeAmmoCount ), vec2( 330, 306 ) * V2 )
    
    if( EngineActive ){ EGP:egpColor( 13, ( Green ) ) }
    else{ EGP:egpColor( 13, ( Red ) ) }
    
    if( CoaxReady ){ EGP:egpColor( 14, ( Green ) ) }
    else{ EGP:egpColor( 14, ( Red ) ) }
    
    if( SmokeReady ){ EGP:egpColor( 15, ( Green ) ) }
    else{ EGP:egpColor( 15, ( Red ) ) }
    
    if( CoaxAmmoCount == 0 ){ EGP:egpColor( 16, ( Red ) )}
    else{ EGP:egpColor( 16, ( Green ) ) }
    
    if( SmokeAmmoCount == 0 ){ EGP:egpColor( 17, ( Red ) )}
    else{ EGP:egpColor( 17, ( Green ) ) }
}

if( changed( Key ) & Key ){
    
    FLIR = !FLIR
}

if( changed( Active ) ){
    
    #Color variable
    Green = vec( 0, 250, 0 )
    
    #EGP Box
    EGP:egpBoxOutline( 2, vec2( 256, 256 ) *V2, vec2( 4, 7 ) * V2 )
    
    #EGP Cross Hair
    EGP:egpLine( 3, vec2( 256, 236 ) * V2, vec2( 256, 252 ) * V2 )
    EGP:egpLine( 4, vec2( 256, 276 ) * V2, vec2( 256, 260 ) * V2 )
    
    EGP:egpLine( 5, vec2( 236, 256 ) * V2, vec2( 252, 256 ) * V2 )
    EGP:egpLine( 6, vec2( 276, 256 ) * V2, vec2( 260, 256 ) * V2 )
    
    EGP:egpLine( 7, vec2( 186, 256 ) * V2, vec2( 216, 256 ) * V2 )
    EGP:egpLine( 8, vec2( 326, 256 ) * V2, vec2( 296, 256 ) * V2 )
    
    #EGP Text
    EGP:egpText( 13, "Engine", vec2( 186, 316 ) * V2 )
    EGP:egpText( 14, "Coax", vec2( 315, 296 ) * V2 )
    EGP:egpText( 15, "Smoke", vec2( 312, 306 ) * V2 )
    
    #EGP Color
    EGP:egpColor( 3, ( Green ) )
    EGP:egpColor( 4, ( Green ) )
    EGP:egpColor( 5, ( Green ) )
    EGP:egpColor( 6, ( Green ) )
    EGP:egpColor( 7, ( Green ) )
    EGP:egpColor( 8, ( Green ) )
    
    EGP:egpColor( 9, ( Green ) )
    EGP:egpColor( 10, ( Green ) )
    EGP:egpColor( 11, ( Green ) )
    EGP:egpColor( 12, ( Green ) )
}

Ops = ops()

#Made By RuBid
