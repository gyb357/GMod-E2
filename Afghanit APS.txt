@name Afghanit APS
@inputs  [Pod]:wirelink [Sensor]:entity
@outputs [Missile]:entity [Activate Used Effect] Timer SpawnReady [CpuUsage Ops]
@persist [InterceptionDist APSAmmo Degree Delay HideHolo TargetToOwner] [OnOffKey]:string
@persist [Own]:entity [Null]:vector [Range]
@persist [Driver Prop]:entity
interval(32)

if (first() | dupefinished()) {
    # ----- User Interface ----- #
    InterceptionDist = 20   # Unit = miter
    APSAmmo          = 100
    Degree           = 20
    Delay            = 0.5
    HideHolo         = 0
    TargetToOwner    = 1
    
    OnOffKey = "c"
    
    # ----- Do Not Touch These ----- #
        Own  = owner()
        Null = vec(0, 0 ,0)
        
        Range = 50000
        
    function entity findGun(Target:entity) {
        findByClass("acf_gun")
        if (!TargetToOwner) {
            findExcludePlayer(Own)
            findExcludePlayerProps(Own)
        }
        findSortByDistance(Target:pos())
        Ary = findToArray()
        Gun = Ary[1, entity]
        
        return Gun
    }
    
    function entity findGLATGM() {
        findByClass("acf_glatgm")
        if (!TargetToOwner) {
            findExcludePlayer(Own)
            findExcludePlayerProps(Own)
        }
        findSortByDistance(Sensor:pos())
        Ary     = findToArray()
        Missile = Ary[1, entity]
        
        return Missile
    }
    
    function number gunAngle(Gun:entity) {
        Pos = (Gun:pos() - Sensor:pos()):toAngle()
        Ang = Gun:forward():toAngle()
        
        YawPos   = Pos:yaw()
        
        YawAng   = Ang:yaw()
        PitchAng = Ang:pitch()
        
        YawAngle   = abs(YawPos - YawAng)
        PitchAngle = abs(PitchAng - 180)
        
        if (YawAngle > 180 - Degree & YawAngle < 180 + Degree & PitchAngle > 180 - Degree & PitchAngle < 180 + Degree) {
            Warning = 1
        } else {
            Warning = 0
        }
        
        return Warning
    }
    
    function number delay(Target:entity) {
        if (Delay != 0 & Timer == 0) {
            timer("Delay", Delay * 1000)
            if (clk("Delay")) {
                Timer = 1
            }
        } elseif (Delay == 0) {
            Timer = 1
        }
        if (changed(Used)) {
            Timer = 0
            stoptimer("Delay")
        }
        
        return Timer
    }
    
    function void interception(Target:entity) {
        Dist = toUnit("m", Sensor:pos():distance(Target:pos()))
        
        SpawnReady = Target ? 1 : 0
        
        if (SpawnReady & Dist < InterceptionDist) {
            if (!Prop) {
                Prop = propSpawn("models/hunter/blocks/cube2x2x2.mdl", Target:pos(), ang(0, 0, 0), 1)
                
                Prop:propDraw(0)
                Prop:setMass(50000)
            }
        } else {
            if (Prop) {
                Prop:propDelete()
            }
        }
    }
    
    function void keyPress() {
        OnOff = Driver:keyPressed(OnOffKey)
        if (changed(OnOff) & OnOff) {
            Activate = !Activate
            if (Activate) {
                hint("Afghanit Activated", 3)
            } else {
                Driver:hintDriver("Afghanit DeActivated", 3)
            }
        }
    }
    
    function void sensorAngle() {
        holoCreate(1)
        holoScale(1, vec(0.75, 0.75, 0.75))
        holoColor(1, vec(250, 0, 0))
        holoPos(1, Sensor:massCenter() + Sensor:forward() * Sensor:boxSize() * 10)
        holoAlpha(1, 255 * !HideHolo)
        holoParent(1, Sensor)
        
        Radius = Degree * 7
        Length = InterceptionDist * 7
        
        holoCreate(2)
        holoModel(2, "models/sprops/misc/cones/size_0/cone_6x6.mdl")
        holoScale(2, vec(Radius, Radius, Length))
        holoPos(2, Sensor:pos() + Sensor:forward() * Length * 6)
        holoAng(2, Sensor:toWorld(ang(0, -90, 90)))
        holoColor(2, vec(250, 0, 0))
        holoAlpha(2, 150 * !HideHolo)
        holoParent(2, Sensor)
    }
    
    function number apsAmmo() {
        if (changed(Prop) & Prop) {
            Used = clamp(Used + 1, 0, APSAmmo)
        }
        
        return Used
    }
    
    sensorAngle()
}
    Active = Pod["Active", number]
    
if (changed(Active) & Active) {
    Driver  = Pod["Driver", entity]
}

if (Active) {
    if (Driver) {
        keyPress()
    }
}

if (Activate) {
    delay(findGLATGM())
    if (!(apsAmmo() > APSAmmo - 1) & gunAngle(findGun(findGLATGM())) & Timer) {
        interception(findGLATGM())
    } else {
        if (Prop) {
            Prop:propDelete()
        }
    }
}

    CpuUsage = cpuUsage() * 1000000
    Ops = ops()
    
# Made By RuBid Anti GLATGM Afghanit Support System V2019.07.12
