@name Missile Defence System Block C
@inputs  [Pod]:wirelink [MainGun Gun Base Turret]:entity [Entities Position Velocity AdvEntityMarker]:array
@inputs  [Active MuzzleVelocity FireKey HEAmmo]
@outputs [Rader Fire]
@outputs [Target]:entity [TravelTime Ops]       #Deburg
@persist [Driver]:entity                        #Driver
@persist [MovingTargetConstant ToUnitMpS]       #Calculation Of Trajectory
@persist [Target]:entity [TargetDistance]:array #Target
@persist [Range] [NULLVector]:vector            #Starging Setting
@persist [DPosition DVelocity ]:vector          #Vector
@persist [DUDTarget Mod]                        #Stuff
interval( 1 )

# HEAmmo Currection of Error
if( HEAmmo ){ HEConstant = 1 } else{ HEConstant = 0 }
if( HEAmmo & DUDTarget == 1 ){ HEDeflection = TravelTime * 25.5 } else{ HEDeflection = 0 }

###########------------------VARIARBLES-----------------############

	   GravityConstant      = 10.5 * !HEConstant + 10.9 * HEConstant
	   MovingFireConstant   = 2.3 * !HEConstant + 1.5 * HEConstant

if( first() | dupefinished() ){

    # Calculation Of Trajectory Variables
    MovingTargetConstant = -1
    ToUnitMpS            = 0.01905
    
    # Starging Setting
    Mod                  = 1
    Range                = 50000
    NULLVector           = vec( 0, 0, 0 )
    
###########---------------------END---------------------############
    
    # Hologram Setting
    holoCreate( 1 )
    holoAlpha( 1, 0 )
    
    holoCreate( 2 )
    holoModel( 2, "models/rotarycannon/kw/14_5mmrac.mdl" )
    holoClipEnabled( 2, 1 )
    holoClip( 2, vec( 11, 0, 0 ), vec( 1, 0, 0 ), 0 )
    holoPos( 2, Gun:pos() )
    holoAng( 2, Gun:angles() )
    holoParent( 2, Gun )
    
    # Sounds
    soundPlay( 1, 0, "acf_extra/airfx/laser_track.wav" )
    soundPlay( 2, 0, "acf_engines/pulsejetmedium.wav" )
    soundVolume( 1, 0 )
    soundVolume( 2, 0 )
    
    soundPitch( 1, 65 )
    soundPitch( 2, 150 )
    
    printColor( vec( 100, 250, 250 ), "Missile Defence System Block C V2018.12.08" )
}

# Parenting Guns
if( dupefinished() ){
    for( I = 1, AdvEntityMarker:count() ){
        Guns = AdvEntityMarker[ I, entity ]
        
        Guns:acfActive()
        Guns:parentTo( holoEntity( 1 ) )
    }
}

    # Stuff Variables
    Driver = Pod[ "Entity", entity ]:driver()
    Key_T  = Driver:keyPressed( "T" )
    
if( Rader ){
    # Find Missile
    findInSphere( Base:pos(), Range )
    findIncludeClass( "ACF_Missile" )
    findExcludePlayerProps( owner() )
    findSortByDistance( Base:pos() )
        
    Target         = findToArray():entity( 1 )
    TargetSpeed    = toUnit( "m/s", Target:vel():length() )
    TargetPosition = Target:pos()
    
    # Closet Target Finder
    for( I = 1, Entities:count() ){
    TargetDistance[ I, number ] = Position[ I, vector ]:distance( entity():pos() )
    
    Index          = TargetDistance:minIndex()
    
    Target         = Entities:entity( Index )
    TargetVelocity = Velocity:vector( Index )
    TargetPosition = Position:vector( Index )
    }
}

if( Active ){
    # Select Mod
    if( Mod > 3 ){ Mod = 1 }
    if( changed( Key_T ) & Key_T ){ Mod += 1 }
    if( changed( Mod ) & Mod ){
        if( Mod == 1 ){ Rader = 0 hint( "CIWS: Offline Mod", 1 ) }
        if( Mod == 2 ){ Rader = 1 hint( "CIWS: Defence Mod", 1 ) }
        if( Mod == 3 ){ Rader = 0 hint( "CIWS: SemiAuto Mod", 1 ) }
    }
}

# CIWS Offline Mod
if( Mod == 1 ){ Turret:setAng( Base:angles() ) }

# CIWS Online Mod
if( Mod == 2 & Target ){
    # ParentedTarget Deflection
    MissileVelocity = toUnit( "m/s", Target:vel():length() )
    if( MissileVelocity == 0 ){
            DUDTarget   = 1
            DPosition   = Target:pos()
            DVelocity   = $DPosition
            Deflection  = DVelocity * 4.76
    } else{
            Deflection  = NULLVector
            DUDTarget   = 0
        }
    
    # Calculation Of Trajectory
    MissileDistance    = toUnit( "m", Target:pos():distance( Gun:pos() ) )
    Distance           = toUnit( "m/s", Gun:pos():distance( TargetPosition ) )
    TravelTime         = Distance / MuzzleVelocity
    Gravity            = GravityConstant * ( TravelTime ) ^ 2 / ToUnitMpS
    Currection         = ( -Target:vel() * MovingTargetConstant - Gun:vel() * 0.9 ) * TravelTime + Deflection + Target:vel() * ToUnitMpS
    Stabilizer         = Currection * MovingFireConstant
    
    Turret:setAng( ( Target:pos() + Stabilizer + vec( 0, 0, Gravity ) - Gun:pos() ):toAngle() )
}

# CIWS SemiAuto Mod
if( Mod == 3 ){
    Turret:setAng( MainGun:angles() )
    
    if( FireKey ){
        Fire = 1
        soundVolume( 2, 100 )
    } else{
        Fire = 0
        soundVolume( 2, 0 )
    }
}

# Firing Element
if( Target & MissileDistance <= 100 ){
    Fire = 1
    soundVolume( 1, 100 )
    soundVolume( 2, 100 )
} else{
    Fire = 0
    soundVolume( 1, 0 )
    soundVolume( 2, 0 )
}

if( Fire == 0 & Mod == 2 ){
    Turret:setAng( Base:angles() )
    
    soundVolume( 1, 0 )
    soundVolume( 2, 0 )
    if( !FireKey ){ Fire = 0 }
}

Turret:setPos( Base:pos() + vec( 0, 0, 10 ) + ( Base:vel() * 0.01505 ) )

Ops = ops()

# Made By RuBid Missile Defence System Block C V2018.12.08
