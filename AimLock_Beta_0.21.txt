@name AimLock Beta 0.21
@inputs  [Pod Cam EGP]:wirelink [Chair]:entity
@inputs  [Active ChangeClass_Key NextWeapon PrevWeapon]
@outputs [Target]:entity
@persist [O Dv]:entity [Player Missile]:array [Ang]:angle [Ranger]:ranger [XY V2]:vector2 [FOV TargetClass Ops]

interval(10)
    
    #EGP Screen
    Dv = Pod["Entity",entity]:driver()
    if( Dv&changed( Dv )){ EGP:egpClear() }
    X = egpScrSize( Dv ):x()
    Y = egpScrSize( Dv ):y()
    V2 = vec2(X,Y) / 512

if( first() | dupefinished() ) {
    
    O = owner()
    Range = 50000
    TargetClass = 1
    
    Chair:propFreeze(1)
    
    function findTarget(){
    findExcludePlayer( O )
    findExcludePlayerProps(O)
    findByClass( "ACF_Ammo" )
    findSortByDistance( O:aimPos() )
    Player = findToArray()
    
    }
    
    function findMissile(){
        
        findByClass("ACF_Missile")
        findExcludePlayerProps("ACF_Missile")
        
    }
    
    EGP:egpBox(17,vec2()*V2,vec2()*V2)
    
}

    #Color
    Red = vec(250,0,0)
    Green = vec(150,250,150)
    
    #Zoom
    if ( ~PrevWeapon | ~NextWeapon ) { FOV = clamp( FOV + ( NextWeapon - PrevWeapon ) * 35,6,90) }
    if ( ~Active ) { FOV = 90 }

if( Active ){
    
    Targeting_Key = O:keyPressed("T")
    
    #Cam
    Position = Chair:pos() + vec(0,0,50)
    Cam["FOV",number] = FOV
    Cam["Position",vector] = Position
    Cam["Activated",number] = 1
    Cam["Parent",entity] = entity()
    
    #EGP Screen
    
    #EGP Stuff
    EGP:egpBox(18,vec2(0,0)*V2, vec2(1024,1024)*V2)
    EGP:egpLine(10,vec2(256,250)*V2, vec2(256,262)*V2)
    EGP:egpLine(11,vec2(250,256)*V2, vec2(262,256)*V2)
    
    EGP:egpBoxOutline(12,vec2(256,256)*V2, vec2(30,25)*V2)
    
    EGP:egpColor(10,( Green ))
    EGP:egpColor(11,( Green ))
    EGP:egpColor(12,vec(100,150,100))
    EGP:egpColor(13,( Green ))
    EGP:egpColor(14,( Green ))
    EGP:egpColor(15,( Green ))
    EGP:egpColor(16,( Green ))
    EGP:egpColor(18,vec4(0,5,0,150))
    
    EGP:egpText(13,"Target Class: ",vec2(276,256)*V2)
    EGP:egpSize(13,15)
    
    EGP:egpText(14,"Player",vec2(308,256)*V2)
    EGP:egpSize(14,15)
    
    EGP:egpText(15,"NPC",vec2(308,266)*V2)
    EGP:egpSize(15,15)
    
    EGP:egpText(16,"Prop",vec2(308,276)*V2)
    EGP:egpSize(16,15)
    
    #Select Target Class
    if(ChangeClass_Key & ~ChangeClass_Key){TargetClass += 1}
    if(TargetClass > 3){TargetClass = 1}
    
    if(TargetClass == 1){EGP:egpBox(17,vec2(330,260)*V2,vec2(10,10)) }
    else{}
    
    if(TargetClass == 2){EGP:egpBox(17,vec2(330,270)*V2,vec2(10,10)) }
    else{}
    
    if(TargetClass == 3){EGP:egpBox(17,vec2(330,280)*V2,vec2(10,10)) }
    else{}
    
    }
    
    if( changed( Active ) ){
        
        EGP:egpClear()
        
    }
    
    if( changed(Targeting_Key) & Targeting_Key ) {
        
        findTarget()
        findMissile()
        
        if( Player[1, entity]:pos():distance(O:aimPos()) < 1500 ) {
            
            Target = Player[1, entity]
            
            Health = Target:health()
            
            hint("Target: " + Target:name(), 3)
            
            #EGP Stuff
            EGP:egp3DTracker(2,vec(0,0,25))
            EGP:egpParent(2,Target)
            
            EGP:egpBoxOutline(3,vec2(),vec2(25,25))
            EGP:egpParent(3,2)
            
            EGP:egpText(1,"Target: ", vec2(20,-15))
            EGP:egpParent(1,2)
            
            EGP:egpText(5,"Health: ", vec2(20,0))
            EGP:egpParent(5,2)
            
            EGP:egpText(6,"" + Target:name() , vec2(66,-15))
            EGP:egpParent(6,2)
            
            EGP:egpText(7,"" + Health,vec2(66,0))
            EGP:egpParent(7,2)
            
            EGP:egpSize(4,15)
            EGP:egpSize(1,15)
            EGP:egpSize(5,15)
            EGP:egpSize(6,15)
            EGP:egpSize(7,15)
            
            EGP:egpColor(1,( Green ))
            EGP:egpColor(6,teamColor(Player[1,entity]:team()))
            EGP:egpColor(3,( Green ))
            EGP:egpColor(4,( Green ))
            EGP:egpColor(5,( Green ))
            
            #Health Color
            if( Health <= 20 )     { EGP:egpColor(7,vec(250,0,0)) }
            elseif( Health <= 40 ) { EGP:egpColor(7,vec(250,100,0)) }
            elseif( Health <= 60 ) { EGP:egpColor(7,vec(250,200,0)) }
            elseif( Health <= 80 ) { EGP:egpColor(7,vec(0,250,0)) }
            elseif( Health <= 100 ){ EGP:egpColor(7,vec(0,250,250)) }
            else{}
        }
        
        else{hint( "No Target" ,3)}
    }
    
    if(Missile){
        
        #propSpawn("models/sprops/geometry/sphere_18.mdl",0)
        
        
        
        
        
        
        }
    
    
    
    

Ops = ops()
