@name Tank Drive Russian Control V3 Beta
@inputs  [Pod]:wirelink [Base]:entity [EngineOnOff Cruise ManualGear GearUp GearDown Brake]:number
@outputs [CpuOps]:array [ManualMod Speed EngineAct Throttle Gear LeftClutch RightClutch LeftBrake RightBrake LeftLatch RightLatch]:number

@persist [Timing]:array
@persist [ForwardGear BackwardGear GearMax]:number
@persist [BrakeF TurnBF AutoB DoLatch LatSpd]:number
@persist [ReverseAD]:number
@persist [SoundPitch SoundMulCons]:number [EngineSound TrackSound]:string [OnOffSound]:array

@persist [AngVelCons ToM]:number

@persist [W A S D F B R L CruiseMod CruiseForward Forward Back ManualMod AGear MGear LatchComp]:number

interval(50)

if (first() | dupefinished()) {
  # ----- E2 setting ----- #
  # Automatic gear shift timing
  Timing = array(5, 10, 20, 30, 40, 50, 55) # km/h Unit

  # Gear
  ForwardGear  = 2 # Must be 1 or 2
  BackwardGear = 1 # Must be 1 or maximum gear
  GearMax      = 8 # Maximum gear

  # Brake
  BrakeF  = 10 # Brake force
  TurnBF  = 10 # Turning brake force
  AutoB   = 1  # Auto brake enable (1 or 0)
  DoLatch = 1  # Latch enable (1 or 0)
  LatSpd  = 2  # Latch activation speed (km/h unit)

  # Details
  ReverseAD = 0 # Front wheel -> 1, Rear wheel -> 0

  # Sound
  SoundPitch   = 80  # 0 ~ 100
  SoundMulCons = 2.5 # Sound pitch multiply constraints
  EngineSound  = ""
  TrackSound   = ""
  OnOffSound   = array("", "") # Engine on sound, Engine off sound

  # ----- Don't modify below part ----- # 
    AngVelCons = 10
    ToM = 0.01905

  soundPlay(2, 0, TrackSound)

  soundVolume(1, 0)
  soundVolume(3, 0)

  soundPitch(3, SoundPitch)
}

  Active = Pod["Active", number]
if (Active) {
  Speed = Base:vel():length()*ToM


  if (changed(EngineOnOff) & EngineOnOff) {EngineAct = !EngineAct}
  if (EngineAct) {
    W = Pod["W", number], S = Pod["S", number]
    A = Pod["A", number], D = Pod["D", number]

    F = ReverseAD ? Back : Forward, B = ReverseAD ? Forward : Back
    R = ReverseAD ? D : A, L = ReverseAD ? A : D
  }
  else {W = A = S = D = 0}


  if (changed(Cruise) & Cruise) {CruiseMod = !CruiseMod}
  if (CruiseMod) {
    if (changed(W) & W) {CruiseForward = !CruiseForward}
    if (changed(S) & S) {CruiseForward = !CruiseForward*-1}
  }
  else {CruiseForward = 0}
  W = CruiseForward == -1 ? 0 : W
  S = CruiseForward == 1 ? 0 : S
  Forward = CruiseForward == 1 ? 1 : W
  Back    = CruiseForward == -1 ? 1 : S


  if (changed(ManualGear) & ManualGear) {ManualMod = !ManualMod}
  if (ManualMod) {
    if (changed(GearUp) & GearUp)     {MGear += 1}
    if (changed(GearDown) & GearDown) {MGear -= 1}
    MGear = clamp(MGear, 0, GearMax)

    if (changed(Forward) & Forward) {if (MGear < ForwardGear) {MGear = ForwardGear}}
    if (changed(Back) & Back) {MGear = BackwardGear}
  }
  else {
    if (Forward) {
      if (Speed < Timing[1, number])     {AGear = ForwardGear}
      elseif (Speed > Timing[1, number]) {AGear = ForwardGear + 1}
      elseif (Speed > Timing[2, number]) {AGear = ForwardGear + 2}
      elseif (Speed > Timing[3, number]) {AGear = ForwardGear + 3}
      elseif (Speed > Timing[4, number]) {AGear = ForwardGear + 4}
      elseif (Speed > Timing[5, number]) {AGear = ForwardGear + 5}
      elseif (Speed > Timing[6, number]) {AGear = ForwardGear + 6}
    }
    if (Back) {AGear = BackwardGear}
  }
  Gear = !ManualMod ? (Forward + Back)*AGear : MGear


  if(Forward | A | Back | D) {
    Throttle = 100
        
    LeftBrake = RightBrake = 0 
    LeftLatch = RightLatch = 0
  }
  else {
    if(AutoB | !CruiseForward) {
      LeftBrake = RightBrake = Brake
      LeftLatch = RightLatch = LatchComp
    }
    Throttle = 0
  }
  Throttle = clamp(Throttle, 0, 100)

  if(L | Brake*!AutoB) {
    if(!Forward & L) {
      Forward = 1
      Gear = (!Gear ? ForwardGear : 0) + Gear
    }
    LeftClutch = 1
    LeftBrake  = BrakeF
    RightLatch = DoLatch
  }
  else {LeftClutch = 0}

  if(R | Brake*!AutoB) {
    if(!Forward & R) {
      Forward = 1
      Gear = (!Gear ? ForwardGear : 0) + Gear
    }
    RightClutch = 1
    RightBrake  = BrakeF
    LeftLatch   = DoLatch
  }
  else {RightClutch = 0}

  if(!A & !D & Speed > AngVelCons/2) {AngVel = round(Base:angVel():yaw())}
  else {AngVel = 0}

  if(AngVel > AngVelCons) {
    LeftBrake   = TurnBF * F
    RightBrake  = TurnBF * B
    LeftClutch  = TurnBF * F
    RightClutch = TurnBF * B
  }
  if(AngVel < -AngVelCons) {
    LeftBrake   = TurnBF * B
    RightBrake  = TurnBF * F
    LeftClutch  = TurnBF * B
    RightClutch = TurnBF * F
  }
}
else {
  W = A = S = D = Throttle = 0
  LeftLatch = RightLatch = LatchComp
}

  LatchComp = DoLatch & (Speed < LatSpd) ? DoLatch : 0

if(changed(EngineAct) & EngineAct) {Base:soundPlay(1, 0, EngineSound)}

if(EngineAct) {
  soundPitch(1, SoundPitch + SoundMulCons*Speed) # EngineSound
  soundPitch(2, SoundMulCons*Speed)              # TrackSound
}
if(changed(EngineAct) & EngineAct)   {soundStop(3), Base:soundPlay(3, 3, OnOffSound[1, string])}
if(changed(!EngineAct) & !EngineAct) {soundStop(3), Base:soundPlay(3, 3, OnOffSound[2, string])}

  CpuOps = array(cpuUsage()*10^6, ops())

# Made by RuBid tank drive russian control V3 Beta V2020.12.25
