@name ACF Tank Turret IFCS V4 Alpha
@inputs  [Pod Cam]:wirelink [Base Gun TurretGate]:entity [ChangeAmmo ChangeClass ChangeCamPos Zoom TIdxUp TIdxDown FindEnt LockOn Trig ToTMod]
@outputs [OpsCpu TargetArr]:array [Target]:entity [CText]:string [FOV]

@persist [Elevation Depression YawClamp FCSMod ToTCount HoldMod ControlMod CamOffset CamDistance ZoomCount MagnificMax]

#
@persist [Owner]:entity [ClassArr]:array [ClassCount ExcludeOwn Range Degree]
@persist [Gv]:vector [G Pi Grad Ddiv M Rkdt Tolerance Kp Ki Kd Kdt]
@persist [TickRate TickInterval]
@persist [Magnific RotateYaw]

#
@persist [CIndex ZIndex TIndex]
@persist [CamMod Lock ToTMod]

#
@persist [TPos GPos VoT GVel VoG]:vector [Dx Dy Mv Th DragCoef]
@persist [Rk4]:array [P1 V1 EndPos]:vector2 [Run RkI P I D Cth]


interval(50)

if (first() | dupefinished()) {
  # ----- Option setting ----- #
  Elevation  = 20
  Depression = 10
  YawClamp   = 360

  FCSMod = 1
  # 0 = notting 
  # 1 = direct ballistics, lockon
  # 2 = artillery ballistics, tot
  ToTCount = 3

  HoldMod = 1
  # 1 = hold gun
  # 2 = rotate at the same angles as the base
  # 3 = rotate to last aim position

  ControlMod = 2
  # 1 = applyforce
  # 2 = setang


  CamOffset   = 100
  CamDistance = 300

  ZoomCount   = 1
  MagnificMax = 80
  # ----- Constraints ----- #
    Owner      = owner()
    ClassArr   = array("player", "prop_physics", "acf_ammo", "base_parent")
    ClassCount = ClassArr:count()
    ExcludeOwn = 1
    Range      = 50000
    Degree     = 10

    Gv   = propGravity()
    G    = gravity()
    Pi   = pi()
    Grad = Gun:acfCaliber()
    Ddiv = acfDragDiv()
    M    = -10

    Rkdt      = 1
    Tolerance = 1 # meter

    Kp  = 0.01
    Ki  = 0.01
    Kd  = 0.01
    Kdt = 0.1

    TickRate = 66
    TickInterval = tickInterval()

    Magnific = MagnificMax/ZoomCount
    RotateYaw = YawClamp/2

  function void setClass() {
    CIndex += (CIndex > ClassCount) ? -CIndex : 1
    CText = ClassArr[CIndex, string]
    Class = (CText == "base_parent") ? "*" : CText
    findClearWhiteList(), findIncludeClass(Class)
  }

  function entity findEntity(CPos:vector, CDir:vector) {
    if (ExcludeOwn) {findExcludePlayer(Owner), findExcludePlayerProps(Owner)}
    findInCone(CPos, CDir, Range, Degree)
    findSortByDistance(CPos)
    return findToArray()
  }

  function entity entity:findParentBase() {
    PEnt = This, Find = 1
    while (Find & perf()) {
      if (PEnt:parent()) {
        PEnt = PEnt:parent()
        if (!PEnt:parent()) {ParentBase = PEnt, Find = 0}
      }
      else {ParentBase = PEnt, Find = 0}
    }
    return ParentBase
  }

  function array rk4(RkTh, DragCoef, Dt) {
    P1 = vec2(0, 0)
    V1 = vec2(Mv*cos(RkTh), Mv*sin(RkTh))
    RkI = 0
    while (Solve & perf()) {
      Kv = V1:length()*DragCoef
      A1 = Gv - Kv*V1
      V2 = V1 + A1*Dt/2, A2 = Gv - Kv*V2
      V3 = V1 + A1*Dt/2, A3 = Gv - Kv*V3
      V4 = V1 + A3*Dt,   A4 = Gv - Kv*V4
      P1 += (Dt/6)*(V1 + 2*(V2 + V3) + V4)
      V1 += (Dt/6)*(A1 + 2*(A2 + A3) + A4)
      RkI++

      Limit = (Dy/Dx)*P1:x() + M
      if (P1:x() > Dx | P1:z() < Limit) {break}
    }
    return array(P1, RkI*TickInterval)
  }

  function array ammoImformation

  function void setTurretBase() {
    Gun:deParent(), TurretGate:deParent()
    Gun:parentTo(TurretGate), TurretGate:parentTo(Base)
  }

  for (I = 1, 8) {TargetArr[I, entity] = noentity()}
  CIndex = TIndex = 1
  if (ControlMod == 2) {setTurretBase()}

  rangerFilter(Gun)
  rangerpersist(1)
}

  Active = Pod["Active", number]
if (changed(Active) & Active) {
  Chair  = Pod["Entity", entity]
  Driver = Pod["Driver", entity]
  Cam["Parent", entity] = Base
}

if (Active) {
  # ----- Cam part ----- #
  if (~ChangeCamPos & ChangeCamPos) {CamMod = !CamMod}
  if (changed(CamMod) & CamMod)     {Cam["Parent", entity] = Base}

  CamPosition = Base:pos() + vec(0, 0, CamOffset)
  Cam["CamPosition", vector] = CamPosition
  Cam["CamDistance", number] = CamDistance*CamMod

  # ----- Zoom part ----- #
  if (~Zoom & Zoom) {ZIndex += (ZIndex > ZoomCount) ? -ZoomCount : 1}
  FOV = 90 - ZIndex*Magnific
  Cam["FOV", number] = FOV

  # -----Ranger part ----- #
  EyeAng = Chair:toLocal(Driver:eyeAngles())
  Ranger = rangerOffset(Range, CamPosition, EyeAngle:forward())

  # ----- LockOn part ----- #
  if (FCSMod == 1) {
    if (~ChangeClass & ChangeClass) {setClass()}
    if (~TIdxUp | ~TIdxDown) {
      TIndex += TIdxUp-TIdxDown
      TIndex = clamp(TIndex, 1, 8)
    }
    if (~FindEnt & FindEnt) {
      CPos = Cam["CamPos", vector]
      CDir = Cam["CamDir", vector]

      TEnt = (CText == "base_parent") ? findEntity(CPos, CDir):findParentBase() : findEntity(CPos, CDir)
      if (!TEnt) {TEnt = noentity()}
      TargetArr:setEntity(TIndex, TEnt)
    }
    if (changed(TIndex) | changed(TEnt)) {Target = TargetArr[TIndex, entity]}
  }

  # ----- Ballistics part ----- #
  if (FCSMod) {
    if (~LockOn & LockOn) {Lock = !Lock}
    TPos = (Target & Lock) ? Target:pos() : (ToTMod & Lock) ? Ranger:pos() : Ranger:pos()
    GPos = Gun:attachmentPos("muzzle")
    TAng = (TPos - GPos):toAngle()

    if (~ChangeAmmo & ~ChangeAmmo)    {AmmoType = Gun:acfAmmoType()}
    if (changed(AmmoType) & AmmoType) {Mv = Gun:acfMuzzleVel()*39.37}

    BSign = Trig ? -1 : 1

    Dx = sqrt((TPos:x() - GPos:x())^2 + (TPos:y() - GPos:y())^2)
    Dy = TPos:z() - GPos:z()
    Th = atan((Mv^2 + -BSign*sqrt(Mv^4 - G*(G*Dx^2 + 2*Dy*Mv^2)))/(G*Dx))

    if (FCSMod == 1) {
      ToF   = Dx/(Mv*cos(Th))
      VoT   = (!VoT & Target:parent()) ? ($TPos*TickRate) : Target:vel()
      GVel  = Gun:vel()
      VoG   = GVel + 0.5*$GVel*TickInterval^2
      Prdct = (VoT - VoG)*ToF + 0.5*$VoT*ToF^2
    }
    if (FCSMod == 2) {
      if (~ToT & ToT) {ToTMod = !ToTMod}
      
      if (changed(Lock) & Lock) {Run = 1}
      if (!Run) {}

      Mass  = Gun:acfProjectileMass()
      DCoef = (Pi*Grad^2)/(4000000*Mass*Ddiv)
      while (Run & perf()) {
        Rk4    = rk4(Th + Cth, DCoef, Rkdt)
        EndPos = Rk4[1, vector2]
        ToF    = Rk4[2, number]

        P = (Dx - EndPos:x() + Dy - EndPos:y())*0.01905
        I += P*Kdt
        D = $P/Kdt
        Cth += (Kp*P + Ki*I + Kd*D)*BSign
      }
      if (abs(P) < Tolerance)   {Run = 0, Hit = 1}
      if (Cth > 90 | Cth < -90) {Run = 0, Hit = 0}

    }

  }
}
  # ----- Gun control part ----- #















  OpsCpu = array(ops(), cpuUsage()*10^6)
