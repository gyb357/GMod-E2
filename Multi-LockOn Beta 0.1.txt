@name Multi-LockOn Beta 0.1
@inputs  [Cam]:wirelink [Active FindEnt TIdxUp TIdxDown ChangeClass]:number
@outputs [Target]:entity [TargetArr]:array [CText Class]:string
@persist [TargetMax ExcludeOwn Range Degree]:number
@persist [Own]:entity [ClassArr]:array [ClassCount]:number
@persist [CIndex TIndex]:number

if (first() | dupefinished()) {
  TargetMax = 8
  ExcludeOwn = 1
  Range = 50000
  Degree = 10
  
  Own = owner()
  ClassArr = array("player", "prop_physics", "acf_ammo", "parentbase")
  ClassCount = ClassArr:count()

  function void setClass() {
    CIndex += (CIndex == ClassCount) ? -CIndex+1 : 1
    CText = ClassArr[CIndex, string]

    if (CText == "parentbase") {
      Class = "prop_physics"
    }
    else {Class = CText}
    findClearWhiteList(), findIncludeClass(Class)
  }

  function entity findEntity(AimPos:vector, AimDir:vector) {
    if (ExcludeOwn) {findExcludePlayer(Own), findExcludePlayerProps(Own)}
    findInCone(AimPos, AimDir, Range, Degree)
    findSortByDistance(AimPos)
    return findToArray()
  }

  function entity entity:findParentBase() {
    Ent = This, Find = 1
    while (Find & perf()) {
      if (Ent:parent()) {
        Ent = Ent:parent()
        if (!Ent:parnet()) {ParentBase = Ent, Find = 0}
      }
      else {ParentBase = Ent, Find = 0}
    }
    return ParentBase
  }

  for (I = 1, TargetMax) {TargetArr[I, entity] = noentity()}
  CIndex = 1
  TIndex = 1
}

if (Active) {
  VPos = Cam ? Cam["CamPos", vector] : Own:shootPos()
  VDir = Cam ? Cam["CamDir", vector] : Own:eye()

  if (~ChangeClass) {setClass()}
  if (~TIdxUp | ~TIdxDown) {
    TIndex += TIdxUp-TIdxDown
    TIndex = clamp(TIndex, 1, TargetMax)
  }
  if (~FindEnt) {
    if (CText == "parentbase") {
      TEnt = findEntity(APos, ADir):findParentBase()
    }
    else {TEnt = findEntity(APos, ADir)}

    if (!TEnt) {TEnt = noentiy()}
    TargetArr:setEntity(Index, TEnt)
  }
  if (~TIndex | ~TEnt) {Target = TargetArr[TIndex, entity]}
}
