@name Tank Drive Russian Control V1
@inputs  [Pod EGP]:wirelink [Base]:entity [CruiseMode ManualMode MGearUp MGearDown Active]
@outputs [Throttle Gear LeftClutch RightClutch LeftBreak RightBreak EngineActive Speed Ops CpuUsage]
@persist [Gear2 Gear3 Gear4 Gear5 Gear6 Gear7 Gear8]
@persist [MinGear MaxGear FirstMGear Brake TurnBrake ReverseADControl AutoBrake TrackSoundEnable EngineSoundEnable EngineSoundPitch] [EngineSound TrackSound EngineStartKey]:string
@persist [BavConstant ScreenSize]
@persist [X Y] [V2]:vector2
@persist [Driver]:entity [MMode CMode]:string [W A S D Cruise ManualGear Forward MGear AGear]
interval(64)

if(first() | dupefinished()) {
    # ----- User Interface ----- #
    #Gear Setting
    Gear2 = 6
    Gear3 = 25
    Gear4 = 35
    Gear5 = 48
    Gear6 = 54
    Gear7 = 58
    Gear8 = 62
    
    # Manual Gear MinMax Setting
    MinGear    = 0
    MaxGear    = 8
    FirstMGear = 1
    
    # Brake Setting
    Brake     = 10
    TurnBrake = 10
    
    # Drive Setting
    ReverseADControl = 1
    AutoBrake        = 1
    
    # Sound Setting
    TrackSoundEnable  = 1
    EngineSoundEnable = 1
    EngineSoundPitch  = 80
    EngineSound       = "acf_extra/vehiclefx/engines/LAV_loop.wav"
    TrackSound        = "acf_extra/tankfx/tracks2.wav"
    
    # Key Setting
    EngineStartKey = "g"
    
    # ----- Do Not Touch Thise ----- #
        BavConstant = 10
        ScreenSize  = 512
        
    function void egp() {
        X  = egpScrSize(Driver):x()
        Y  = egpScrSize(Driver):y()
        V2 = vec2(X, Y) / ScreenSize
    }
    
    function void key() {
        EngineActiveKey = Driver:keyPressed(EngineStartKey)
        if(changed(EngineActiveKey) & EngineActiveKey) {EngineActive = !EngineActive}
    }
    
    Base:soundPlay(2, 0, TrackSound)
    soundVolume(1, 0)
    soundVolume(2, 0)
}

if(Active) {
    Driver = Pod["Entity", entity]:driver()
    
    if(changed(Active)) {
        egp()
        for(I = 1, 3) {
            EGP:egpColor(I, vec(0, 250, 0))
            EGP:egpAlign(I, 1)
        }
        Cruise     = 0
        ManualGear = 0
    }
    EGP:egpText(1, "Manual Gear: " + MGear, vec2(226, 290) * V2)
    EGP:egpText(2, "Gear: " + MMode + " Mode", vec2(226, 300) * V2)
    EGP:egpText(3, "Drive:" + CMode + " Mode", vec2(226, 310) * V2)
    
    Speed = toUnit("km/h", Base:vel():length())
    SoundPitch = Speed * 2
    if(Driver) {
        key()
        
        soundPitch(2, SoundPitch * TrackSoundEnable)
        soundVolume(2, 1)
    }
    
    if(EngineActive) {
        W     = Pod["W", number]
        A     = Pod["A", number]
        S     = Pod["S", number]
        D     = Pod["D", number]
        Space = Pod["Space", number]
    }
    
    Right = ReverseADControl ? D : A
    Left  = ReverseADControl ? A : D
    Fwd   = !ReverseADControl ? Forward : S
    Bck   = !ReverseADControl ? S : Forward
    
    if(changed(CruiseMode) & CruiseMode) {Cruise = !Cruise}
    if(changed(ManualMode) & ManualMode) {
        ManualGear = !ManualGear
        MGear = FirstMGear
    }
    
    if(changed(MGearUp) & MGearUp & ManualGear) {
        MGear += 1
    } elseif(changed(MGearDown) & MGearDown & ManualGear) {
        MGear -= 1
    } elseif(!ManualGear) {
        MGear = 0
    }
    MGear = clamp(MGear, MinGear, MaxGear)
    
    Forward = Cruise ? 1 : W
    Gear    = !ManualGear ? (Forward + S) * AGear : MGear
    MMode   = ManualGear ? "Manual" : "Auto"
    CMode   = Cruise ? "Cruise" : "None"
    
    if(Forward & Speed < Gear2) {AGear = 1}
    elseif(Forward & Speed > Gear2 & Speed < Gear4) {AGear = 2}
    elseif(Forward & Speed > Gear4 & Speed < Gear5) {AGear = 3}
    elseif(Forward & Speed > Gear5 & Speed < Gear6) {AGear = 4}
    elseif(Forward & Speed > Gear6 & Speed < Gear7) {AGear = 5}
    elseif(Forward & Speed > Gear7 & Speed < Gear8) {AGear = 6}
    elseif(Forward & Speed > Gear8) {AGear = 7}
    elseif(S) {AGear = 8}
    
    if(Forward | A | S | D) {
        Throttle = 100
        
        LeftBreak  = 0
        RightBreak = 0
    } else {
        if(AutoBrake) {
            LeftBreak  = Brake
            RightBreak = Brake
        }
        Throttle = 0
    }
    
    if(Left | Space * !AutoBrake) {
        LeftClutch = 1
        LeftBreak  = Brake
    } else {
        LeftClutch = 0
    }
    
    if(Right | Space * !AutoBrake) {
        RightClutch = 1
        RightBreak  = Brake
    } else {
        RightClutch = 0
    }
    
    if(!A & !D & Speed > BavConstant / 2) {Bav = round(Base:angVel():yaw())} else {Bav = 0}
    
    if(Bav > BavConstant) {
        LeftBreak   = Brake * Fwd
        RightBreak  = Brake * Bck
        
        LeftClutch  = TurnBrake * Fwd
        RightClutch = TurnBrake * Bck
    }
    if(Bav < -BavConstant) {
        LeftBreak   = Brake * Bck
        RightBreak  = Brake * Fwd
        
        LeftClutch  = TurnBrake * Bck
        RightClutch = TurnBrake * Fwd
    }
} else {
    Throttle   = 0
    
    LeftBreak  = Brake
    RightBreak = Brake
    
    soundVolume(2, 0)
}

if(EngineActive) {
    soundPitch(1, SoundPitch * 0.3 + EngineSoundPitch * EngineSoundEnable)
} else {
    soundStop(1, 0)
}
if(changed(EngineActive)) {Base:soundPlay(1, 0, EngineSound)}

    Ops      = ops()
    CpuUsage = cpuUsage() * 1000000
    
# Made By RuBid Tank Drive Russian Control V1 V2019.04.26
