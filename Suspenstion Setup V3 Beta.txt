@name Suspenstion Setup V3 Beta
@inputs  [Wheels]:array [Chassis]:entity
@persist [ApplyForTank DoConstraint PrintDebug DrawHolo DeleteE2 ConstBreak Rope Elastic Ballsocket Nocolide]:number
@persist [Forward Right Up Pitch Yaw Roll Spring Damping Relative Width]:number [Material]:string
@persist [ConsArray]:array [ConsCount WheelCount]:number [NilVec]:vector
@persist [ConsBreakIndex RopeIndex ElasticIndex BallsocketIndex NoColideIndex]:number
@persist [Core Index]:array

if (first() | dupefinished()) {
  # ----- Action Setting ----- #
  ApplyForTank = 1
  DoConstraint = 1
  PrintDebug   = 1
  DrawHolo     = 1
  DeleteE2     = 0

  # ----- Constraints Setting ----- #
  ConstBreak = 1
  Rope       = 1
  Elastic    = 1
  Ballsocket = 1
  Nocolide   = 1

  # ----- Suspenstion Setting ----- #
    # Position
    Forward = 30
    Right   = 10
    Up      = 10

    # Angle
    Pitch = 0
    Yaw   = 0
    Roll  = 0

    # Elastic
    Spring   = 50000
    Damping  = 5000
    Relative = 1000

    # Draw
    Width    = 0
    Material = "cable/cable2"

  # ----- Don't modify below part ----- #
    ConsArray  = array("rope", "elastic", "ADVballsocket", "nocolide")
    ConsCount  = ConsArray:count()
    WheelCount = Wheels:count()
    NilVec     = vec()

  function void array:consBreak() {
    #ifdef entity:isConstrainedTo(string) & entity:constraintBreak(string)
    for (I = 1, WheelCount) {
      local WhlEnt = Wheels[I, entity]

      for (J = 1, ConsCount) {
        local ConsStr = ConsArray[J, string]

        if (DoConstraint & WhlEnt:isConstrainedTo(ConsStr)) {WhlEnt:constraintBreak(ConsStr), ConsBreakIndex++}
      }
    }
    #endif
  }

  function vector localPos(Sign:number, Ent:entity) {
    return Chassis:toLocal(Ent:massCenter()) + vec(Forward, Right*Sign, Up):rotate(Pitch, Yaw, Roll)
  }

  function void array:setRope() {
    #ifdef rope(number, entity, vector, entity, vector, number, number, string, number)
    for (I = 1, WheelCount) {
      local WhlEnt  = Wheels[I, entity]

      for (J = 1, 2) {
        local Sign    = J == 1 ? 1 : -1
        local ToLocal = localPos(Sign, WhlEnt)

        RopeIndex++

        if (DrawHolo) {
          local WhlCenter = WhlEnt:massCenter()
          local Pos = (WhlCenter + ToLocal)/2
          local Ang = (Pos - ToLocal):toAngle()

          local Scale = vec(0.2, Forward, 0.2)
          local Color = vec(50, 50, 250)

          for (I = 1, RopeIndex)  {holoCreate(I, Pos, Scale, Ang, Color)}
          #for (I = 1, WheelCount) {holoCreate(I, WhlCenter, Scale, Chassis:angles(), Color, )}
        }

        if (DoConstraint) {rope(RopeIndex, WhlEnt, WhlEnt:massCenterL(), Chassis, ToLocal, 0, Width, Material, 1)}
      }
    }
    #endif
  }

  function void array:setElastic() {
    #ifdef hydraulic(number, entity, vector, entity, vector, number, number, number, string, number, number)
    for (I = 1, WheelCount) {
      local WhlEnt  = Wheels[I, entity]
      local ToLocal = localPos(1, WhlEnt)

      ElasticIndex++

      if (DoConstraint) {hydraulic(ElasticIndex, WhlEnt, WhlEnt:massCenterL(), Chassis, ToLocal, Spring, Damping, Relative, Material, Width, 0)}
    }
    #endif
  }

  function void array:setBallsocket() {
    #ifdef ballsocket(entity, vector, entity, vector, vector, vector, number)
    local Sprocket = Wheels[1, entity]

    for (I = 1, WheelCount) {
      local WhlEnt = Wheels[I, entity]

      if (DoConstraint) {
        if (Chassis) {
          ballsocket(WhlEnt, NilVec, Chassis, -vec(180, 0, 0), vec(180, 0, 0), NilVec, 1)
          BallsocketIndex++
        }
        ballsocket(Wheels[1+I, entity], NilVec, Sprocket, -NilVec, NilVec, NilVec, 1)
        BallsocketIndex++
      }
    }
    #endif
  }

  function void array:setNocolide() {
    #ifdef noColide(entity, entity)
    for (I = 1, WheelCount) {
      local WhlEnt = Wheels[I, entity]
      local AftWhl = Wheels[I+1, entity]

      if (DoConstraint) {noColide(WhlEnt, AftWhl), NoColideIndex++}
    }
    #endif
  }

  function void printDebug() {
    # Color
    local Red   = vec(250,  0,   0 )
    local Green = vec(150, 250, 150)
    local White = vec(250, 250, 250)

    local C_Rope       = Rope       ? Green : Red
    local C_Elastic    = Elastic    ? Green : Red
    local C_Ballsocket = Ballsocket ? Green : Red
    local C_Nocolide   = Nocolide   ? Green : Red

    # Title
    printColor(White, "[Suspenstion Setup V3]")

    # Constraints
    printColor(
      White,        "Constraints: ",
      C_Rope,       "Rope("       + RopeIndex       + ")", White, " / ", 
      C_Elastic,    "Elastic("    + ElasticIndex    + ")", White, " / ",
      C_Ballsocket, "Ballsocket(" + BallsocketIndex + ")", White, " / ",
      C_Nocolide,   "Nocolide("   + NoColideIndex   + ")"
    )
  }

  if (ConstBreak) {Wheels:consBreak()}
  if (Rope)       {Wheels:setRope()}
  if (Elastic)    {Wheels:setElastic()}
  if (Ballsocket) {Wheels:setBallsocket()}
  if (Nocolide)   {Wheels:setNocolide()}
  if (PrintDebug) {printDebug()}
}

if (dupefinished()) {
  if (DeleteE2) {
    #ifdef entity:propDelete()
    entity():propDelete()
    #endif
  }
}

# Made by RuBid Suspenstion Setup V3 Beta
