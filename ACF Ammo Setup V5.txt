@name ACF Ammo Setup V5
@inputs  [Chair Gun]:entity [Active ChangeAmmo]:number
@outputs [AmmoText]:string
@persist [ResetLink printDebug]:number
@persist [TypeTable RoundTable]:table [AmmoArray AmmoType AmmoCount]:array
@persist [Link NoLink]:number
@persist [Chair]:entity

if (first() | dupefinished()) {

  ResetLink = 1
  printDebug = 1


  function array entity:ammoType() {
    if (Gun:type() == "acf_gun") {findIncludePlayerProps(Own), findByClass("acf_ammo")}

    AmmoArray = findToArray()
    for (I = 1, AmmoArray:count()) {
      local AmmoEnt = AmmoArray[I, entity]

      TypeTable[AmmoEnt:acfAmmoType(), number] = TypeTable[AmmoEnt:acfAmmoType(), number] + 1
      
      if (changed(TypeTable:count())) {AmmoType:pushEntity(AmmoEnt)}
    }
    return AmmoType
  }

  function void entity:ammoLink(AmmoArray:array) {
      for (I = 1, Ammo:count()) {
        local AmmoEnt = AmmoArray[I, entity]
        if (ResetLink) {Gun:acfUnlinkFrom(AmmoEnt, 0)}

        local Caliber = AmmoEnt:acfCaliber()
        if (Caliber == Gun:acfCaliber()) {
          Gun:acfLinkTo(AmmoEnt, 0)
          Link++
        }
        else {
          NoLink++
        }
    }
  }

  function void ammoSelect(AmmoType:array) {
    local TypeCount = AmmoType:count()
    if (changed(ChangeAmmo) & ChangeAmmo) {
      Index += Index < TypeCount ? 1 : -TypeCount + 1
      
      local AmmoTypeEnt = AmmoType[Index, entity]
      local GunAmmoType = Gun:acfAmmoType()
      local GunAmmoLink = Gun:acfLinks()

      AmmoText = AmmoTypeEnt:acfAmmoType() + " (" + GunAmmoType + ") " + GunAmmoType:count()

      for (I = 1, GunAmmoLink:count()) {
        local GunAmmoLinkEnt =  GunAmmoLink[I, entity]

        GunAmmoLinkEnt:acfActive(AmmoTypeEnt:acfAmmoType() == GunAmmoLinkEnt:acfAmmoType() ? 1 : 0)
      }
    }
  }

  function void printDebug(AmmoArray:array) {
    for (I = 1, AmmoArray:count()) {
      local AmmoEnt = AmmoArray[I, entity]
      local AmmoType = AmmoEnt:acfAmmoType()
      local AmmoMass = AmmoEnt:mass()

      if (AmmoEnt:parent()) {ParentMass += AmmoMass}
      if (!AmmoEnt:parent()) {PhysicsMass += AmmoMass}

      AllRoudes += AmmoEnt:acfRounds()
      RoundTable[AmmoType, number] = RoundTable[AmmoType, number] + AmmoEnt:acfRounds()
    }

    local Red = vec(250, 0, 0)
    local Green = vec(150, 250, 150)
    local White = vec(250, 250, 250)

    # Title
    Chair:printColorDriver(White, "[ACF Ammp Setup V5]")
    # Mass
    Chair:printColorDriver(
      Green, 
        "Total Mass: " + ParentMass + PhysicsMass + " / "
      + "ParentMass: " + ParentMass + " / "
      + "PhysicsMass: " + PhysicsMass + ""
    )
    # Type & Rounds
    if (Link) {
      Chair:printColorDriver(
        Green,
          Link + " Ammo linked to gun"
               + " (" + AllRoudes + " Munitions")
      )
    }
    if (NoLink) {Chair:printColorDriver(Red, NoLink + "Ammo does not match the gun's caliber or type")}

    for (I = 1, RoundTable:count()) {
      local AmmoEnt = AmmoArray[I, entity]
      local AmmoType = AmmoEnt:acfAmmoType()

      AmmoCount:pushNumber(RoundTable[AmmoType, number])

      Chair:printColorDriver(
        White, "AmmoType: ",
        Green, I
        + ": "
        + AmmoType
        + AmmoEnt:acfAmmoType()
        + " (" + AmmoCount[I, number] + " Munitions)"
      )
    }

    if (!AmmoArray:count()) {Chair:printColorDriver(Red, "Ammo not found")}
    if (!Gun) {Chair:printColorDriver(Red, "Ammo not found")}
  }

  Gun:ammoType()
  Gun:ammoLink(AmmoArray)
}

if (Active) {
  ammoSelect()
}
