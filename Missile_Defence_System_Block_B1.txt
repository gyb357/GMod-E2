@name Missile Defence System Block B1
@inputs  [Pod]:wirelink [MainGun Gun Gate Base Turret]:entity [Entities Position Velocity]:array
@inputs  [AdvEntityMarker]:array [Active MuzzleVelocity FireKey]
@outputs [Rader Fire]
@outputs [Target]:entity [DUD Ops TargetSpeed]   TargetPosition:vector                                    #Deburg
@persist [Driver Target]:entity                                         #Entities
@persist [Range] [TargetDistance]:array                                 #Range
@persist [ToUnitMpS GravityConstant MovingFireConstant MovingTargetConstant]   #Calculation Of Trajectory
@persist [Mod] [String]:string [Distance]:array
@persist [DPosition DVelocity]:vector
interval( 1 )

if( first() | dupefinished() ){
###########------------------VARIARBLES-----------------############
    #Start Setting
    Range                = 50000
    Mod                  = 1
    
    #Calculation Of Trajectory Variables
    GravityConstant      = 10.5
    MovingFireConstant   = 2.3
    MovingTargetConstant = -1
    ToUnitMpS            = 0.01905
    
###########---------------------END---------------------############

    #ParentGuns
    function parentGuns(){
        for( I = 1, AdvEntityMarker:count() ){
            Guns = AdvEntityMarker[ I, entity ]
            
            Guns:acfActive()
            Guns:parentTo( holoEntity( 1 ) )
        }
    }
    
    holoCreate( 1 )
    holoAlpha( 1, 0 )
    
    holoCreate( 2 )
    holoModel( 2, "models/rotarycannon/kw/14_5mmrac.mdl" )
    holoClipEnabled( 2, 1 )
    holoClip( 2, vec( 11, 0, 0 ), vec( 1, 0, 0 ), 0 )
    holoPos( 2, Gun:pos() )
    holoAng( 2, Gun:angles() )
    holoParent( 2, Gun )
    

    soundVolume( 1, 0 )
    soundVolume( 2, 0 )
    
    soundPitch( 1, 65 )
    soundPitch( 2, 150 )
    
    printColor( vec( 100, 250, 250 ), "Missile Defence System Block B V2018.11.22" )
}
    #Stuff Variables
    Driver = Pod[ "Entity", entity ]:driver()
    Key_T  = Driver:keyPressed( "T" )
    
if( Active ){
    
        findInSphere( Base:pos(), Range )
        findIncludeClass( "ACF_Missile" )
        
        Target         = findToArray():entity( 1 )
        TargetSpeed    = toUnit( "m/s", Target:vel():length() )
        TargetPosition = Target:pos()
        if( TargetSpeed == 0 ){ DUD = 1 } else{ DUD = 0 }
    
    
    
    
    
    
    
    
    
    #Select Mod
    if( Mod > 3 ){ Mod = 1 }
    if( changed( Key_T ) & Key_T ){ Mod += 1 }
    if( changed( Mod ) & Mod ){
        if( Mod == 1 ){ String = "CIWS: Offline Mod"  Rader = 0 hint( "CIWS: Offline Mod", 1 ) }
        if( Mod == 2 ){ String = "CIWS: Defence Mod"  Rader = 1 hint( "CIWS: Defence Mod", 1 ) }
        if( Mod == 3 ){ String = "CIWS: SemiAuto Mod" Rader = 0 hint( "CIWS: SemiAuto Mod", 1 ) }
    }
} if( !Active & Mod == 1 ){
    stoptimer( "interval" )
}

#CIWS Offline Mod
if( Mod == 1 ){
    Turret:setAng( Base:angles() )
}

#CIWS Online Mod
if( Mod == 2 & Target ){

    # ParentedTarget Deflection
    MissileVelocity = toUnit( "m/s", Target:vel():length() )
    if( MissileVelocity == 0 ){
            Parented   = 1
            DPosition  = Target:pos()
            DVelocity  = $DPosition
            Deflection = DVelocity * 4.76
    } else{
            Deflection = vec( 0,0, 0 )
            Parented   = 0
        }
    
    # Calculation Of Trajectory
    MissileDistance    = toUnit( "m", Target:pos():distance( Gun:pos() ) )
    DUDTargetDistance  = toUnit( "m/s", Gun:pos():distance( TargetPosition ) )
    TravelTime         = DUDTargetDistance / MuzzleVelocity
    Gravity            = GravityConstant * ( TravelTime ) ^ 2 / ToUnitMpS
    Currection         = ( -Target:vel() * MovingTargetConstant - Gun:vel() * 0.9 ) * TravelTime + Deflection + Target:vel()*0.01905
    Stabilizer         = Currection * MovingFireConstant
    
    Turret:setAng( ( Target:pos() + Stabilizer + vec( 0, 0, Gravity ) - Gun:pos() ):toAngle() )
    
    if( Fire == 0 & Mod == 2 ){
        Turret:setAng( Base:angles() )
        
        soundVolume( 1, 0 )
        soundVolume( 2, 0 )
        if( !FireKey ){
            Fire = 0
        }
    }
}

#CIWS SemiAuto Mod
if( Mod == 3 ){
    Turret:setAng( MainGun:angles() )
    
    if( FireKey ){
        Fire = 1
        soundVolume( 2, 100 )
    } else{
        Fire = 0
        soundVolume( 2, 0 )
    }
}

if( Target & MissileDistance <= 100 ){
    Fire = 1
    soundVolume( 1, 100 )
    soundVolume( 2, 100 )
} else{
    Fire = 0
    soundVolume( 1, 0 )
    soundVolume( 2, 0 )
}
    
Turret:setPos( Base:pos() + vec( 0, 0, 10 ) + ( Base:vel() * 0.01505 ) )

if( dupefinished() ){
    parentGuns()
    timer( "FindMissile", 1 )
}

Ops = ops()

#Made By RuBid EZTankTurret FAFCS Block A V2018.11.22
