@name PID Control Test
@inputs  [Pod]:wirelink [Entity1 Entity2]:entity
@outputs [CpuOps]:array
@persist [P_gain I_gaim D_gain Dt TurnRate]:number
@persist [P_Error I_Error D_Error P I D P_ErrorPrev]:number
@persist [PitchAngle PitchAngle_PID]:number
@persist [Chair Driver]:entity
interval(1)

if (first() | dupefinished()) {
    P_gain = 0.5
    I_gaim = 0.05
    D_gain = 0.2
    
    Dt = 5
    
    TurnRate = 10
    
    function number calculate_PID(Reference:number, Feedback:number) {
        P_Error = Reference - Feedback
        I_Error = I_Error + (P_Error * Dt)
        D_Error = (P_Error - P_ErrorPrev) / Dt
        
        P = P_gain * P_Error
        I = I_gaim * I_Error
        D = D_gain * D_Error
        
        Output = P + I + D
        
        P_ErrorPrev = P_Error
        
        return Output
    }
    
    function void control_Entity() {
        Pitch = Driver:eyeAngles():pitch()
        
        Rate = calculate_PID(Pitch, Entity2:angles():pitch())
        
        PitchAngle += clamp(Pitch - PitchAngle, -TurnRate, TurnRate)
        PitchAngle_PID += clamp(Pitch - PitchAngle_PID, -Rate, Rate)
        
        Entity1:setAng(ang(-PitchAngle, 0, 0))
        Entity2:setAng(ang(PitchAngle_PID, 0, 0))
    }
}

    Active = Pod["Active", number]
    
if (changed(Active)) {
    Chair = Pod["Entity", entity]
    Driver = Chair:driver()
}

if (Active) {
    control_Entity()
}

    CpuOps = array(round(cpuUsage() * 1000000), ops())
