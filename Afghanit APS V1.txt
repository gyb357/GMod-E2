@name Afghanit APS V1
@inputs  [Pod]:wirelink [ATGM Sensor Emitter]:entity [Active]
@outputs [Launcher]:entity [Used Ready FireEffect On CpuUsage Ops]
@persist [SpawnDist FindAngle ReloadTime Ammo Delay HideHolo SoundEffect EmitterEffect FindExcludeOwnProp] [OnOffKey ReloadKey]:string
@persist [Own]:entity [ClassAry SoundAry]:array
@persist [Driver ATGMProp ShellProp]:entity [Reload Sound Reloading Timer]
interval(64)

if (first() | dupefinished()) {
    # ----- User Interface ----- #
    SpawnDist  = 50
    FindAngle  = 50
    ReloadTime = 1
    Ammo       = 100
    Delay      = 1
    
    HideHolo      = 0
    SoundEffect   = 1
    EmitterEffect = 1
    
    FindExcludeOwnProp = 0
    
    OnOffKey  = "t"
    ReloadKey = "r"
    
    # ----- Do Not Touch These ----- #
        Own = owner()
        
        ClassAry = array("acf_missile", "acf_rack", "acf_gun")
        SoundAry = array("ambient/explosions/explode_1.wav", "ambient/explosions/explode_2.wav", "ambient/explosions/explode_3.wav", "ambient/explosions/explode_4.wav")
        
    function entity findMissile() {
        function string classCheck() {
            Class = ATGM:type() == ClassAry[1, string] ? ClassAry[2, string] : ClassAry[3, string]
            
            return Class
        }
        if (FindExcludeOwnProp) {
            findExcludePlayerProps(Own)
        }
        findByClass(classCheck())
        findSortByDistance(Launcher:pos())
        Ary      = findToArray()
        Launcher = Ary[1, entity]
        
        return Launcher
    }
    
    function number condition() {
        function number detected() {
            Dist = toUnit("m", Sensor:pos():distance(ATGM:pos()))
            MissileToRackDist = toUnit("m", Launcher:pos():distance(ATGM:pos()))
            if (changed(ATGM:pos())) {
                Detected = MissileToRackDist > 1 & Dist < SpawnDist ? 1 : 0
            } else {
                Detected = 0
            }
            
            return Detected
        }
        
        function number missileAngle() {
            PosToAng  = (ATGM:pos() - Sensor:pos()):toAngle()
            GunAng    = (ATGM:forward():toAngle())
            
            Yaw   = abs(PosToAng:yaw() - GunAng:yaw())
            Pitch = abs(abs(PosToAng:pitch() - GunAng:pitch()) - 180)
            
            Yaw_O = abs(abs(Sensor:angles():yaw() - ATGM:angles():yaw()))
            
            Yaw_M   = Yaw > 180 - FindAngle & Yaw < 180 + FindAngle & Yaw_O > 180 - FindAngle & Yaw_O < 180 + FindAngle
            Pitch_M = Pitch > 180 - FindAngle & Pitch < 180 + FindAngle
            
            Find = Yaw_M & Pitch_M ? 1 : 0
            
            return Find
        }
        
        function number ammo() {
            function number used() {
                Used = clamp(Used + 1, 0, Ammo)
                
                return Used
            }
            
            function number reload() {
                if (Used != 0 & Used <= Ammo & !Reloading) {
                    CanReload = 1
                } else {
                    CanReload = 0
                }
                if (changed(Reload) & CanReload) {
                    timer("Reload", ReloadTime * 1000)
                    CanReload = 0
                    Reloading = 1
                }
                
                if (clk("Reload")) {
                    Reloading = 0
                    Used      = 0
                    stoptimer("Reload")
                }

                
                return Used
            }
            
            if (changed(ATGMProp) & ATGMProp | changed(ShellProp) & ShellProp ) {
                used()
            }
            reload()
            
            return Used
        }
        
        function number delay() {
            if (Delay != 0 & !Timer & !Detected) {
                timer("Delay", Delay * 1000)
                if (clk("Delay")) {
                    Timer = 1
                }
            } elseif (Delay == 0) {
                Timer = 0
            }
            if (changed(ATGMProp) | changed(ShellProp)) {
                Timer = 0
            }
            
            Ready = Timer
            
            return Ready
        }
        
        ammo()
        delay()
        
        if (ATGM) {
            Spawn = detected() & missileAngle() & !(Used > Ammo - 1) & Ready ? 1 : 0
            FireEffect = Spawn 
        } else {
            Spawn             = 0
            Dist              = 0
            MissileToRackDist = 0
            Detected          = 0
            Find              = 0
        }
        
        return Spawn
    }
    
    function void interceptionATGM(Missile:entity, Spawn:number) {
        if (Spawn) {
            if (!ATGMProp) {
                Pos      = Missile:type() == ClassAry[1, string] ? Missile:pos() : Missile:pos() - Missile:pos():normalized() * 50
                ATGMProp = propSpawn("models/hunter/blocks/cube4x4x4.mdl", Pos, ang(0, 0, 0), 1)
                
                ATGMProp:propDraw(0)
                ATGMProp:setMass(50000)
            }
        } else {
            if (ATGMProp) {
                ATGMProp:propDelete()
            }
        }
    }
    
    function void effect() {
        if (ATGMProp | ShellProp) {
            Effect = 1
        } else {
            Effect = 0
        }
        if (changed(Effect == 1) & !Effect) {
            Sound   = floor(random(1, 5))
            Explode = SoundAry[Sound, string]
            
            soundPlay(1, 3, Explode)
            soundVolume(1, SoundEffect)
        }
    }
    
    function void sensorAngle() {
        holoCreate(1)
        holoModel(1, "models/sprops/misc/cones/size_0/cone_6x6.mdl")
        holoScale(1, vec(2, 2, 2))
        holoColor(1, vec(250, 0, 0))
        holoPos(1, Sensor:massCenter() + Sensor:forward() * Sensor:boxSize() * 5)
        holoAng(1, Sensor:forward():toAngle() + ang(90, 0, 0))
        holoAlpha(1, 255 * !HideHolo)
        holoParent(1, Sensor)
    }
    
    sensorAngle()
}

if (changed(Active)) {
    Chair  = Pod["Entity", entity]
    Driver = Chair:driver()
}
    Active = Pod["Active", number]
    
if (Active) {
    Reload = Driver:keyPressed(ReloadKey)
    OnOff  = Driver:keyPressed(OnOffKey)
}

if (changed(OnOff) & OnOff) {
    On = !On
}
if (On) {
    interceptionATGM(ATGM, condition())
    effect()
}

    CpuUsage = cpuUsage() * 1000000
    Ops      = ops()

# Made By RuBid Afghanit APS V1 V2019.07.29
